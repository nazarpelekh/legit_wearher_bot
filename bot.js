// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –∑ .env —Ñ–∞–π–ª—É
require("dotenv").config();

const { Telegraf } = require("telegraf");

const { showMainSettings } = require("./handlers/settingsHandlers");
const { handleSettingsCallback } = require("./handlers/callbackHandlers");

// –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤
const EnhancedNOAAService = require("./services/enhancedNoaaService");
const GeoService = require("./services/geoService");
const {
    getMainKeyboard,
    showCurrentConditions,
    handleForecast,
    handleAurora,
    handleAlerts,
    handleApiStatus,
} = require("./handlers/enhancedCommandHandlers");

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const GEOCODING_API_KEY = process.env.GEOCODING_API_KEY || "";

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö)
const userLocations = new Map();
const userSettings = new Map();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
const defaultSettings = {
    notifications: false,
    kpThreshold: 5.0,
    auroraNotifications: true,
    dailyForecast: false,
    timezone: "Europe/Kiev",
};

// –õ–æ–≥—É–≤–∞–Ω–Ω—è
const log = (message) => {
    console.log(`[${new Date().toISOString()}] ${message}`);
};

// –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
bot.start(async (ctx) => {
    const userName = ctx.from.first_name || "–¥—Ä—É–∂–µ";
    const keyboard = getMainKeyboard();

    const welcomeMessage = `üåå –í—ñ—Ç–∞—é, ${userName}!

–¶–µ Legit Weather Bot –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∫–æ—Å–º—ñ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö NOAA Space Weather Prediction Center —Ç–∞ GFZ Potsdam.

üîπ <b>–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞:</b>
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ –¥–≤–æ—Ö –¥–∂–µ—Ä–µ–ª –æ–¥–Ω–æ—á–∞—Å–Ω–æ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä –∫—Ä–∞—â–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è Kp
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∑–∞ –ª–æ–∫–∞—Ü—ñ—î—é
‚Ä¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∫–æ—Å–º—ñ—á–Ω—É –ø–æ–≥–æ–¥—É
‚Ä¢ –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è API –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ

üìç <b>–ü–æ—á–Ω—ñ—Ç—å –∑ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü—ñ—ó</b> –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏:

/current - –ø–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏
/forecast - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—ñ  
/alerts - –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
/settings - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
/help - –¥–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞

üõ∞Ô∏è –î–∞–Ω—ñ –∑ NOAA SWPC (–æ—Å–Ω–æ–≤–Ω–µ) + GFZ Potsdam (—Ä–µ–∑–µ—Ä–≤).`;

    await ctx.reply(welcomeMessage, { ...keyboard, parse_mode: "HTML" });
});

bot.help(async (ctx) => {
    const helpMessage = `üìñ <b>–î–æ–≤—ñ–¥–∫–∞ Legit Weather Bot</b>

<b>üîß –ö–æ–º–∞–Ω–¥–∏:</b>
/start - –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/current - –ø–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏ –∫–æ—Å–º—ñ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏
/forecast - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—ñ
/alerts - –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —Ç–∞ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è
/settings - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω—å
/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞

<b>üìä –Ü–Ω–¥–µ–∫—Å–∏ –∫–æ—Å–º—ñ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏:</b>

üî∏ <b>Kp-—ñ–Ω–¥–µ–∫—Å (0-9):</b>
‚Ä¢ 0-2: üü¢ –°–ø–æ–∫—ñ–π–Ω–æ
‚Ä¢ 3-4: üü° –ù–µ–≤–µ–ª–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å  
‚Ä¢ 5-6: üü† –ü–æ–º—ñ—Ä–Ω–∞ –≥–µ–æ–º–∞–≥–Ω—ñ—Ç–Ω–∞ –±—É—Ä—è
‚Ä¢ 7-8: üî¥ –°–∏–ª—å–Ω–∞ –≥–µ–æ–º–∞–≥–Ω—ñ—Ç–Ω–∞ –±—É—Ä—è
‚Ä¢ 9: üö® –ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞ –±—É—Ä—è

<b>üåç –í–ø–ª–∏–≤ –Ω–∞ –∂–∏—Ç—Ç—è:</b>
‚Ä¢ –ü–æ—Ä—É—à–µ–Ω–Ω—è GPS-–Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–∞–¥—ñ–æ–∑–≤'—è–∑–∫–æ–º
‚Ä¢ –ó–±–æ—ó –≤ —Ä–æ–±–æ—Ç—ñ —Å—É–ø—É—Ç–Ω–∏–∫—ñ–≤
‚Ä¢ –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞ –Ω–∞ –Ω–∏–∂—á–∏—Ö —à–∏—Ä–æ—Ç–∞—Ö
‚Ä¢ –í–ø–ª–∏–≤ –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–º–µ—Ä–µ–∂—ñ

<b>üì° –î–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö:</b>
‚Ä¢ NOAA Space Weather Prediction Center (–æ—Å–Ω–æ–≤–Ω–µ)
‚Ä¢ GFZ Potsdam (–Ω—ñ–º–µ—Ü—å–∫–∞ –≥–µ–æ—Ñ—ñ–∑–∏—á–Ω–∞ —Å–ª—É–∂–±–∞)
‚Ä¢ –ü—Ä–∞–≤–∏–ª–æ: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è Kp
‚Ä¢ –°—É–ø—É—Ç–Ω–∏–∫–∏ GOES 16/18
‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω–∞ –º–µ—Ä–µ–∂–∞ –º–∞–≥–Ω–µ—Ç–æ–º–µ—Ç—Ä—ñ–≤

–î–∞–Ω—ñ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –∫–æ–∂–Ω—ñ 1-3 —Ö–≤–∏–ª–∏–Ω–∏!`;

    await ctx.reply(helpMessage, { parse_mode: "HTML" });
});

// –û–±—Ä–æ–±–∫–∞ –ª–æ–∫–∞—Ü—ñ—ó
bot.on("location", async (ctx) => {
    const { latitude, longitude } = ctx.message.location;
    const userId = ctx.from.id;

    log(
        `–û—Ç—Ä–∏–º–∞–Ω–æ –ª–æ–∫–∞—Ü—ñ—é –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}: ${latitude}, ${longitude}`
    );

    userLocations.set(userId, {
        latitude,
        longitude,
        timestamp: new Date(),
    });

    log(`–õ–æ–∫–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í—Å—å–æ–≥–æ –ª–æ–∫–∞—Ü—ñ–π: ${userLocations.size}`);

    try {
        const locationName = await GeoService.getLocationName(
            latitude,
            longitude,
            GEOCODING_API_KEY
        );
        const keyboard = getMainKeyboard();

        await ctx.reply(
            `‚úÖ <b>–õ–æ–∫–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞!</b>\n` +
                `üìç ${locationName}\n` +
                `üåê ${latitude.toFixed(4)}¬∞, ${longitude.toFixed(4)}¬∞\n\n` +
                `–¢–µ–ø–µ—Ä –≤–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Å–º—ñ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏ –∑ NOAA —Ç–∞ GFZ Potsdam –¥–ª—è –≤–∞—à–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É.\n\n` +
                `üåå <b>–°–ø—Ä–æ–±—É–π—Ç–µ "–ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞"</b> –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É!`,
            { ...keyboard, parse_mode: "HTML" }
        );
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ª–æ–∫–∞—Ü—ñ—ó: ${error.message}`);
        await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ª–æ–∫–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }
});

// –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.hears("üìä –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ", (ctx) =>
    showCurrentConditions(ctx, userLocations, GEOCODING_API_KEY)
);
bot.command("current", (ctx) =>
    showCurrentConditions(ctx, userLocations, GEOCODING_API_KEY)
);

bot.hears("üîÆ –ü—Ä–æ–≥–Ω–æ–∑", (ctx) => handleForecast(ctx, userLocations));
bot.command("forecast", (ctx) => handleForecast(ctx, userLocations));

bot.hears("üåå –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞", (ctx) =>
    handleAurora(ctx, userLocations, GEOCODING_API_KEY)
);
bot.command("aurora", (ctx) =>
    handleAurora(ctx, userLocations, GEOCODING_API_KEY)
);

bot.hears("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", handleAlerts);
bot.command("alerts", handleAlerts);

// –†–æ–∑—à–∏—Ä–µ–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ callback_query
bot.on("callback_query", async (ctx) => {
    const action = ctx.callbackQuery.data;

    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –æ–±—Ä–æ–±–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    const settingsHandled = await handleSettingsCallback(
        ctx,
        action,
        userSettings,
        userLocations,
        GEOCODING_API_KEY
    );

    if (settingsHandled) {
        return; // –Ø–∫—â–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö, –≤–∏—Ö–æ–¥–∏–º–æ
    }

    // –†–µ—à—Ç–∞ callback –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —è–∫ —î
    switch (action) {
        case "update_current":
            await ctx.answerCbQuery("üîÑ –û–Ω–æ–≤–ª—é—é –¥–∞–Ω—ñ –∑ –æ–±–æ—Ö API...");
            await showCurrentConditions(ctx, userLocations, GEOCODING_API_KEY);
            break;

        case "show_forecast":
            await ctx.answerCbQuery("üîÆ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –ø—Ä–æ–≥–Ω–æ–∑...");
            await handleForecast(ctx, userLocations);
            break;

        case "show_alerts":
            await ctx.answerCbQuery("‚ö†Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è...");
            await handleAlerts(ctx);
            break;

        case "show_aurora":
            await ctx.answerCbQuery();
            await handleAurora(ctx, userLocations, GEOCODING_API_KEY);
            break;

        case "update_aurora":
            await ctx.answerCbQuery("üîÑ –û–Ω–æ–≤–ª—é—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤...");
            await handleAurora(ctx, userLocations, GEOCODING_API_KEY);
            break;

        case "update_forecast":
            await ctx.answerCbQuery("üîÑ –û–Ω–æ–≤–ª—é—é –ø—Ä–æ–≥–Ω–æ–∑...");
            await handleForecast(ctx, userLocations);
            break;

        case "api_status":
            await handleApiStatus(ctx);
            break;

        case "show_chart":
            await ctx.answerCbQuery(
                "üìà –§—É–Ω–∫—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó!"
            );
            break;

        case "aurora_forecast_3day":
            await ctx.answerCbQuery(
                "üìà 3-–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó!"
            );
            break;

        default:
            await ctx.answerCbQuery("üîÑ –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...");
            break;
    }
});

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
bot.hears("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", (ctx) => showMainSettings(ctx, userSettings));
bot.command("settings", (ctx) => showMainSettings(ctx, userSettings));

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
bot.catch((err, ctx) => {
    log(`–ü–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞ –¥–ª—è ${ctx.updateType}: ${err.message}`);
    ctx.reply(
        "‚ùå –°—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ Legit Weather Bot.\n\n" +
            "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /current –¥–ª—è –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö.\n" +
            "üõ∞Ô∏è –°—Ç–∞—Ç—É—Å API: /settings ‚Üí '–°—Ç–∞—Ç—É—Å API'"
    );
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    try {
        if (!BOT_TOKEN || BOT_TOKEN.trim() === "") {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
            console.log("1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env");
            console.log("2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ BOT_TOKEN –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
            process.exit(1);
        }

        log(
            "üöÄ –ó–∞–ø—É—Å–∫ Legit Weather Bot –∑ –ø–æ–¥–≤—ñ–π–Ω–∏–º API (NOAA + GFZ Potsdam)..."
        );

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
        await bot.telegram.setMyCommands([
            { command: "start", description: "–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º" },
            {
                command: "current",
                description: "–ü–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏ (NOAA + GFZ Potsdam)",
            },
            {
                command: "forecast",
                description: "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—ñ –∑ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è–º",
            },
            {
                command: "aurora",
                description: "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤ –¥–ª—è –≤–∞—à–æ—ó –ª–æ–∫–∞—Ü—ñ—ó",
            },
            { command: "alerts", description: "–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è" },
            { command: "settings", description: "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Å—Ç–∞—Ç—É—Å API" },
            { command: "help", description: "–î–æ–≤—ñ–¥–∫–∞ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó" },
        ]);

        // –¢–µ—Å—Ç—É—î–º–æ API –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
        log("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É...");
        const apiStatus = await EnhancedNOAAService.getApiStatus();
        log(`NOAA –¥–æ—Å—Ç—É–ø–Ω–∏–π: ${apiStatus.noaa.available}`);
        log(`GFZ Potsdam –¥–æ—Å—Ç—É–ø–Ω–∏–π: ${apiStatus.gfz.available}`);

        if (!apiStatus.noaa.available && !apiStatus.gfz.available) {
            log("‚ö†Ô∏è –£–í–ê–ì–ê: –í—Å—ñ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É!");
        } else if (apiStatus.noaa.available && apiStatus.gfz.available) {
            log("‚úÖ –û–±–∏–¥–≤–∞ API –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ!");
        } else {
            log("üü° –û–¥–∏–Ω –∑ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∞–ª–µ –±–æ—Ç –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏");
        }

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        await bot.launch();

        log(
            "‚úÖ Legit Weather Bot —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π –∑ –ø–æ–¥–≤—ñ–π–Ω–∏–º API (NOAA + GFZ)!"
        );
        log(`ü§ñ Bot username: @${bot.botInfo.username}`);

        // Graceful shutdown
        process.once("SIGINT", () => bot.stop("SIGINT"));
        process.once("SIGTERM", () => bot.stop("SIGTERM"));
    } catch (error) {
        log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: ${error.message}`);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    startBot();
}

module.exports = { bot, startBot };
