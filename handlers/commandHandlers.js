const { Markup } = require("telegraf");
const EnhancedNOAAService = require("../services/enhancedNoaaService");
const GeoService = require("../services/geoService");
const FormatUtils = require("../utils/formatUtils");

// –õ–æ–≥—É–≤–∞–Ω–Ω—è
const log = (message) => {
    console.log(`[${new Date().toISOString()}] ${message}`);
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
function getMainKeyboard() {
    return Markup.keyboard([
        ["üìä –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑"],
        ["üåå –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞", "‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è"],
        [Markup.button.locationRequest("üìç –û–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é")],
        ["‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"],
    ]).resize();
}

// –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É –ø–æ—Ç–æ—á–Ω–∏—Ö —É–º–æ–≤ –∑ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º
async function showCurrentConditions(ctx, userLocations, geocodingApiKey) {
    const userId = ctx.from.id;

    try {
        const loadingMessage = await ctx.reply("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–∞–Ω—ñ –∑ NOAA...");

        log("=== –ü–û–ß–ê–¢–û–ö showCurrentConditions ===");

        // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ Kp
        log("–û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑...");
        const forecast = await EnhancedNOAAService.getForecast();

        if (forecast) {
            log(`–û—Ç—Ä–∏–º–∞–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ ${forecast.length} –¥–Ω—ñ–≤`);
            forecast.forEach((day, index) => {
                log(
                    `–î–µ–Ω—å ${index}: ${day.DateStamp}, hourlyData: ${
                        day.hourlyData ? day.hourlyData.length : 0
                    } –∑–∞–ø–∏—Å—ñ–≤`
                );
            });
        } else {
            log("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ");
        }

        let currentKpData = null;
        let todayHourlyData = "";

        if (forecast && forecast.length > 0) {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è Kp –∑ –ø—Ä–æ–≥–Ω–æ–∑—É
            log("–®—É–∫–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π Kp –≤ –ø—Ä–æ–≥–Ω–æ–∑—ñ...");
            currentKpData = getCurrentKpFromForecast(forecast);

            if (currentKpData) {
                log(
                    `‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç–æ—á–Ω–∏–π Kp –∑ –ø—Ä–æ–≥–Ω–æ–∑—É: ${currentKpData.kp} (${currentKpData.timeRange})`
                );
            } else {
                log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π Kp –≤ –ø—Ä–æ–≥–Ω–æ–∑—ñ");
            }

            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –¥–∞–Ω—ñ –∑ –ø—Ä–æ–≥–Ω–æ–∑—É
            const today = new Date();
            const todayDay = String(today.getDate()).padStart(2, "0");
            const todayForecast = forecast?.find(
                (day) => day.DateStamp && day.DateStamp.includes(todayDay)
            );

            if (todayForecast && todayForecast.hourlyData) {
                log(
                    `–ó–Ω–∞–π–¥–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –ø—Ä–æ–≥–Ω–æ–∑ –∑ ${todayForecast.hourlyData.length} –≥–æ–¥–∏–Ω–∞–º–∏`
                );

                // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –º–∞–π–±—É—Ç–Ω—ñ –≥–æ–¥–∏–Ω–∏
                const futureHours = getFutureHourlyData(
                    todayForecast.hourlyData
                );

                if (futureHours.length > 0) {
                    log(`–ü–æ–∫–∞–∑—É—î–º–æ ${futureHours.length} –º–∞–π–±—É—Ç–Ω—ñ—Ö –≥–æ–¥–∏–Ω`);
                    todayHourlyData =
                        "\n<b>üïê –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (–∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å):</b>\n";
                    futureHours.forEach((hour) => {
                        const hourKp = parseFloat(hour.kp);
                        const hourStatus = FormatUtils.getKpStatus(hourKp);
                        todayHourlyData += `${hour.timeRange}: ${hour.kp} ${hourStatus.emoji}\n`;
                    });
                } else {
                    log("–ù–µ–º–∞—î –º–∞–π–±—É—Ç–Ω—ñ—Ö –≥–æ–¥–∏–Ω –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è");
                }
            } else {
                log(
                    "–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–º–∞—î –ø–æ—á–∞—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"
                );
            }
        }

        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –ø—Ä–æ–≥–Ω–æ–∑—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API
        if (!currentKpData) {
            log("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π API –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ Kp");
            const apiKpData = await EnhancedNOAAService.getCurrentKpIndex();
            currentKpData = {
                kp: apiKpData.kp,
                timeRange: null,
                source: apiKpData.source,
            };
            log(
                `–û—Ç—Ä–∏–º–∞–Ω–æ –∑ API: Kp=${currentKpData.kp}, –¥–∂–µ—Ä–µ–ª–æ=${currentKpData.source}`
            );
        }

        const kpStatus = FormatUtils.getKpStatus(currentKpData.kp);

        let locationInfo = "";
        if (userLocations.has(userId)) {
            const location = userLocations.get(userId);
            const locationName = await GeoService.getLocationName(
                location.latitude,
                location.longitude,
                geocodingApiKey
            );
            locationInfo = `üìç <b>–õ–æ–∫–∞—Ü—ñ—è:</b> ${locationName}\n`;
        }

        const updateTime = new Date().toLocaleString("uk-UA", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
            timeZone: "Europe/Kiev",
            timeZoneName: "short",
        });

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö
        let sourceInfo = "üì° <b>–î–∂–µ—Ä–µ–ª–æ:</b> ";
        if (currentKpData.source === "forecast") {
            sourceInfo += "NOAA SWPC (–ø—Ä–æ–≥–Ω–æ–∑)";
        } else if (currentKpData.source === "noaa") {
            sourceInfo += "NOAA SWPC";
        } else if (currentKpData.source === "gfz-potsdam") {
            sourceInfo += "GFZ Potsdam";
        } else {
            sourceInfo += "–†–µ–∑–µ—Ä–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ";
        }

        let conditionsMessage = `üåå <b>–ö–æ—Å–º—ñ—á–Ω–∞ –ø–æ–≥–æ–¥–∞</b>
üïê –û–Ω–æ–≤–ª–µ–Ω–æ: ${updateTime}
${locationInfo}
${sourceInfo}

<b>üî∏ –ü–æ—Ç–æ—á–Ω–∞ –≥–µ–æ–º–∞–≥–Ω—ñ—Ç–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b>
Kp-—ñ–Ω–¥–µ–∫—Å: ${currentKpData.kp.toFixed(1)} ${kpStatus.emoji}`;

        // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Å–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª, —è–∫—â–æ —î
        if (currentKpData.timeRange) {
            conditionsMessage += ` (${currentKpData.timeRange})`;
        }

        conditionsMessage += `
–°—Ç–∞—Ç—É—Å: ${kpStatus.status}
${kpStatus.description}
${todayHourlyData}
<b>üåç –ü–æ—Ä–∞–¥–∏ –¥–ª—è –≤–∞—à–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É:</b>
${getRegionalAdvice(
    kpStatus.level,
    currentKpData.kp,
    userLocations.get(userId)
)}`;

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback("üîÑ –û–Ω–æ–≤–∏—Ç–∏", "update_current"),
                Markup.button.callback("üìà –ì—Ä–∞—Ñ—ñ–∫ 9 –≥–æ–¥", "show_chart"),
            ],
            [
                Markup.button.callback("üîÆ –ü—Ä–æ–≥–Ω–æ–∑", "show_forecast"),
                Markup.button.callback("üåå –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞", "show_aurora"),
            ],
        ]);

        await ctx.deleteMessage(loadingMessage.message_id);
        await ctx.reply(conditionsMessage, { ...keyboard, parse_mode: "HTML" });

        log("=== –ö–Ü–ù–ï–¶–¨ showCurrentConditions ===");
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö —É–º–æ–≤: ${error.message}`);
        try {
            await ctx.deleteMessage(loadingMessage.message_id);
        } catch (deleteError) {
            // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        }
        await ctx.reply(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ NOAA.\n" +
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è."
        );
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–∞
function getSourceInfo(kpData) {
    const sourceEmoji = {
        noaa: "üõ∞Ô∏è",
        "gfz-potsdam": "üá©üá™",
        fallback: "‚ö†Ô∏è",
        generated: "üîß",
    };

    const sourceName = {
        noaa: "NOAA SWPC",
        "gfz-potsdam": "GFZ Potsdam",
        fallback: "–ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º",
        generated: "–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ",
    };

    let sourceInfo = `${
        sourceEmoji[kpData.source] || "üì°"
    } <b>–î–∂–µ—Ä–µ–ª–æ Kp:</b> ${sourceName[kpData.source] || "–ù–µ–≤—ñ–¥–æ–º–µ"}\n`;

    if (kpData.bothAvailable) {
        sourceInfo += `‚úÖ <b>–†–µ–∑–µ—Ä–≤–Ω–µ API:</b> –î–æ—Å—Ç—É–ø–Ω–µ (${kpData.backupValue})\n`;
        sourceInfo += `üîÑ <b>–ü—Ä–∞–≤–∏–ª–æ:</b> –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è\n`;
    } else if (kpData.hasBackup === false) {
        sourceInfo += `‚ö†Ô∏è <b>–†–µ–∑–µ—Ä–≤–Ω–µ API:</b> ${
            kpData.fallbackReason || "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–µ"
        }\n`;
    }

    return sourceInfo;
}

// –†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏
function getRegionalAdvice(level, kpValue, location) {
    const isHighLatitude = location && Math.abs(location.latitude) > 50;

    switch (level) {
        case "low":
            return "‚úÖ –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ";
        case "minor":
            return "üì° –ú–æ–∂–ª–∏–≤—ñ –Ω–µ–∑–Ω–∞—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ GPS";
        case "moderate":
            return isHighLatitude
                ? "üåå –ú–æ–∂–ª–∏–≤—ñ –ø–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ GPS —Ç–æ—á–Ω—ñ—Å—Ç—å"
                : "üì° –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ GPS —Ç–æ—á–Ω—ñ—Å—Ç—å";
        case "strong":
            return isHighLatitude
                ? "üö® –û—á—ñ–∫—É—é—Ç—å—Å—è —è—Å–∫—Ä–∞–≤—ñ –ø–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞! –û–±–µ—Ä–µ–∂–Ω–æ –∑ GPS —Ç–∞ —Ä–∞–¥—ñ–æ"
                : "‚ö†Ô∏è –ú–æ–∂–ª–∏–≤—ñ —Å–µ—Ä–π–æ–∑–Ω—ñ –ø–æ—Ä—É—à–µ–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó —Ç–∞ –∑–≤'—è–∑–∫—É";
        case "extreme":
            return "üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è! –ú–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó";
        default:
            return "";
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ API
async function handleForecast(ctx, userLocations) {
    try {
        await ctx.reply("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –ø—Ä–æ–≥–Ω–æ–∑ –∑ NOAA —Ç–∞ SpaceWeatherLive...");

        log("–í–∏–∫–ª–∏–∫–∞—é EnhancedNOAAService.getForecast()...");
        const forecast = await EnhancedNOAAService.getForecast();
        log(`–û—Ç—Ä–∏–º–∞–≤ –ø—Ä–æ–≥–Ω–æ–∑: ${forecast ? forecast.length : 0} –¥–Ω—ñ–≤`);

        if (!forecast || forecast.length === 0) {
            await ctx.reply(
                "üìä –ü—Ä–æ–≥–Ω–æ–∑–Ω—ñ –¥–∞–Ω—ñ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –∑ —É—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª.\n\n" +
                    "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /current –¥–ª—è –ø–æ—Ç–æ—á–Ω–∏—Ö —É–º–æ–≤\n" +
                    "üìû –ê–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ - —Å–µ—Ä–≤—ñ—Å–∏ –æ–Ω–æ–≤–ª—é—é—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏ –¥–≤—ñ—á—ñ –Ω–∞ –¥–µ–Ω—å.\n\n" +
                    "üîç –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞:\n" +
                    "‚Ä¢ NOAA Space Weather Prediction Center\n" +
                    "‚Ä¢ SpaceWeatherLive API"
            );
            return;
        }

        let forecastMessage = "üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ –∫–æ—Å–º—ñ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏</b>\n\n";

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ —Ç–∞ –¥–æ–¥–∞—î–º–æ —ñ–∫–æ–Ω–∫—É
        const sourceInfo = forecast[0]?.source;
        const sourceEmoji = {
            noaa: "üõ∞Ô∏è",
            spaceweatherlive: "üåê",
            generated: "üîß",
        };

        const sourceName = {
            noaa: "NOAA SWPC",
            spaceweatherlive: "SpaceWeatherLive (—Ä–µ–∑–µ—Ä–≤)",
            generated: "–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
        };

        if (sourceInfo) {
            forecastMessage += `${
                sourceEmoji[sourceInfo] || "üì°"
            } <b>–î–∂–µ—Ä–µ–ª–æ:</b> ${sourceName[sourceInfo] || "–ù–µ–≤—ñ–¥–æ–º–µ"}\n\n`;
        }

        forecast.forEach((day, index) => {
            const kpMax = parseFloat(day.KpMax || 0);
            const status = FormatUtils.getKpStatus(kpMax);
            const confidence =
                day.confidence ||
                (index === 0 ? "–í–∏—Å–æ–∫–∞" : index === 1 ? "–ü–æ–º—ñ—Ä–Ω–∞" : "–ù–∏–∑—å–∫–∞");

            forecastMessage += `üìÖ <b>${day.DateStamp}</b>\n`;
            forecastMessage += `–ú–∞–∫—Å. Kp: ${day.KpMax} ${status.emoji}\n`;
            forecastMessage += `–°—Ç–∞—Ç—É—Å: ${status.status}\n`;
            forecastMessage += `–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –±—É—Ä: ${FormatUtils.getStormProbability(
                kpMax
            )}\n`;
            forecastMessage += `–î–æ—Å—Ç–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: ${confidence}\n`;

            // –î–æ–¥–∞—î–º–æ –ø–æ—á–∞—Å–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑
            if (day.hourlyData && day.hourlyData.length > 0) {
                forecastMessage += `\n<b>–ü–æ—á–∞—Å–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (–∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å):</b>\n`;
                day.hourlyData.forEach((hour) => {
                    const hourKp = parseFloat(hour.kp);
                    const hourStatus = FormatUtils.getKpStatus(hourKp);
                    forecastMessage += `${hour.timeRange}: ${hour.kp} ${hourStatus.emoji}\n`;
                });
            }

            forecastMessage += `\n`;
        });

        // –î–æ–¥–∞—î–º–æ –ø–æ—Ä–∞–¥–∏ –ø—Ä–æ –ø–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞
        const maxKpInForecast = Math.max(
            ...forecast.map((d) => parseFloat(d.KpMax || 0))
        );
        const userId = ctx.from.id;
        const userLocation = userLocations.get(userId);

        if (userLocation && maxKpInForecast >= 5) {
            const canSeeAurora = GeoService.canSeeAurora(
                userLocation.latitude,
                userLocation.longitude,
                maxKpInForecast
            );

            if (canSeeAurora) {
                forecastMessage +=
                    "üåå <b>–ì–∞—Ä–Ω—ñ –Ω–æ–≤–∏–Ω–∏!</b> –ü—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥–Ω—ñ–≤ –º–æ–∂–ª–∏–≤—ñ –ø–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞ —É –≤–∞—à–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ!\n\n";
            }
        }

        // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
        if (sourceInfo === "noaa") {
            forecastMessage +=
                "‚úÖ <b>–ù–∞–¥—ñ–π–Ω—ñ—Å—Ç—å:</b> –í–∏—Å–æ–∫–∞ (–æ—Å–Ω–æ–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ)\n";
        } else if (sourceInfo === "spaceweatherlive") {
            forecastMessage +=
                "üîÑ <b>–ù–∞–¥—ñ–π–Ω—ñ—Å—Ç—å:</b> –ü–æ–º—ñ—Ä–Ω–∞ (—Ä–µ–∑–µ—Ä–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ)\n";
            forecastMessage +=
                "üí° <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> NOAA —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\n";
        } else if (sourceInfo === "generated") {
            forecastMessage +=
                "‚ö†Ô∏è <b>–ù–∞–¥—ñ–π–Ω—ñ—Å—Ç—å:</b> –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ (–∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ)\n";
            forecastMessage += "üîß <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> –í—Å—ñ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ\n";
        }

        forecastMessage += "üîÑ <b>–û–Ω–æ–≤–ª–µ–Ω–Ω—è:</b> –¥–≤—ñ—á—ñ –Ω–∞ –¥–µ–Ω—å\n";
        forecastMessage += "‚ö° <b>–î–µ—Ç–∞–ª—ñ:</b> /current - –ø–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏";

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑", "update_forecast"),
                Markup.button.callback("üåå –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞", "show_aurora"),
            ],
            [
                Markup.button.callback("üìä –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ", "update_current"),
                Markup.button.callback("üõ∞Ô∏è –°—Ç–∞—Ç—É—Å API", "api_status"),
            ],
        ]);

        await ctx.reply(forecastMessage, { ...keyboard, parse_mode: "HTML" });
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É: ${error.message}`);
        await ctx.reply(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –∑ —É—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª.\n\n" +
                "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ\n" +
                "üìä –ü–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏: /current\n\n" +
                "üõ†Ô∏è –¢–µ—Ö–Ω—ñ—á–Ω—ñ –¥–µ—Ç–∞–ª—ñ:\n" +
                "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ NOAA SWPC\n" +
                "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ SpaceWeatherLive\n" +
                "‚Ä¢ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
        );
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤
async function handleAurora(ctx, userLocations, geocodingApiKey) {
    log(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${ctx.from.id} –∑–∞–ø–∏—Ç–∞–≤ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤`);

    const userId = ctx.from.id;
    const userLocation = userLocations.get(userId);

    // –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    log(`–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–∫–∞—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`);
    log(`–†–æ–∑–º—ñ—Ä userLocations: ${userLocations.size}`);
    log(`–õ–æ–∫–∞—Ü—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞: ${userLocation ? "—Ç–∞–∫" : "–Ω—ñ"}`);

    if (userLocation) {
        log(
            `–õ–æ–∫–∞—Ü—ñ—è: ${userLocation.latitude}, ${userLocation.longitude}, –∑–±–µ—Ä–µ–∂–µ–Ω–∞: ${userLocation.timestamp}`
        );
    }

    if (!userLocation) {
        log(`–õ–æ–∫–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`);
        await ctx.reply(
            "üìç <b>–°–ø–µ—Ä—à—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é</b>\n\n" +
                "–î–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ –≤–∞—à–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è.\n\n" +
                "üí° <b>–ü—ñ–¥–∫–∞–∑–∫–∞:</b> –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –º–µ–Ω—é Telegram (üìé ‚Üí –õ–æ–∫–∞—Ü—ñ—è).",
            {
                ...Markup.keyboard([
                    [Markup.button.locationRequest("üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é")],
                    ["üìä –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑"],
                    ["‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"],
                ]).resize(),
                parse_mode: "HTML",
            }
        );
        return;
    }

    try {
        const kpData = await EnhancedNOAAService.getCurrentKpIndex();
        const { latitude, longitude } = userLocation;

        const locationName = await GeoService.getLocationName(
            latitude,
            longitude,
            geocodingApiKey
        );

        // –í–ê–ñ–õ–ò–í–û: –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ GeoService.getMagneticLatitude –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        let magneticLat;
        try {
            magneticLat = GeoService.getMagneticLatitude(latitude, longitude);
        } catch (error) {
            log(`–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–∞–≥–Ω—ñ—Ç–Ω–æ—ó —à–∏—Ä–æ—Ç–∏: ${error.message}`);
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø—Ä–æ—â–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
            magneticLat = latitude - 11; // –ü—Ä–∏–±–ª–∏–∑–Ω–µ –∑–º—ñ—â–µ–Ω–Ω—è –º–∞–≥–Ω—ñ—Ç–Ω–æ–≥–æ –ø–æ–ª—é—Å–∞
        }

        const canSeeAurora = GeoService.canSeeAurora(
            latitude,
            longitude,
            kpData.kp
        );

        const auroralBoundary = 67 - 2 * kpData.kp;
        const distanceToAurora = Math.abs(
            Math.abs(magneticLat) - auroralBoundary
        );
        const bestTime = getBestAuroraTime(latitude);

        let auroraMessage = `üåå <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤</b>\n\n`;
        auroraMessage += `üìç <b>–õ–æ–∫–∞—Ü—ñ—è:</b> ${locationName}\n`;
        auroraMessage += `üß≠ <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏:</b> ${latitude.toFixed(
            4
        )}¬∞, ${longitude.toFixed(4)}¬∞\n`;
        auroraMessage += `üß≤ <b>–ú–∞–≥–Ω—ñ—Ç–Ω–∞ —à–∏—Ä–æ—Ç–∞:</b> ${magneticLat.toFixed(
            1
        )}¬∞\n\n`;

        // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–æ Kp
        const sourceEmoji = { noaa: "üõ∞Ô∏è", "gfz-potsdam": "üá©üá™", fallback: "‚ö†Ô∏è" };
        const sourceName = {
            noaa: "NOAA",
            "gfz-potsdam": "GFZ Potsdam",
            fallback: "–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º",
        };
        auroraMessage += `${
            sourceEmoji[kpData.source] || "üì°"
        } <b>–î–∂–µ—Ä–µ–ª–æ Kp:</b> ${sourceName[kpData.source] || "–ù–µ–≤—ñ–¥–æ–º–µ"}\n`;

        if (kpData.bothAvailable) {
            auroraMessage += `üîÑ <b>–†–µ–∑–µ—Ä–≤:</b> ${kpData.backupValue} (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –±—ñ–ª—å—à–µ)\n`;
        }

        auroraMessage += `<b>üî∏ –ü–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏:</b>\n`;
        auroraMessage += `Kp-—ñ–Ω–¥–µ–∫—Å: ${kpData.kp.toFixed(1)}\n`;
        auroraMessage += `–ì—Ä–∞–Ω–∏—Ü—è –∞–≤—Ä–æ—Ä–∞–ª—å–Ω–æ–º—É –æ–≤–∞–ª–∞: ${auroralBoundary.toFixed(
            1
        )}¬∞ –º–∞–≥. —à–∏—Ä–æ—Ç–∏\n\n`;

        if (canSeeAurora) {
            auroraMessage += `‚úÖ <b>–ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞ –ú–û–ñ–õ–ò–í–Ü!</b>\n`;
            auroraMessage += `üéØ –í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∑–æ–Ω—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ\n`;
            auroraMessage += `üìè –í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –æ–≤–∞–ª–∞: ${distanceToAurora.toFixed(
                1
            )}¬∞\n\n`;
            auroraMessage += `<b>üïê –ù–∞–π–∫—Ä–∞—â–∏–π —á–∞—Å —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è:</b>\n${bestTime}\n\n`;
            auroraMessage += `<b>üëÄ –ü–æ—Ä–∞–¥–∏ –ø–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—é:</b>\n`;
            auroraMessage += `‚Ä¢ –î–∏–≤—ñ—Ç—å—Å—è –Ω–∞ –ø—ñ–≤–Ω—ñ—á\n`;
            auroraMessage += `‚Ä¢ –£–Ω–∏–∫–∞–π—Ç–µ —Å–≤—ñ—Ç–ª–æ–≤–æ–≥–æ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è\n`;
            auroraMessage += `‚Ä¢ –ß–µ–∫–∞–π—Ç–µ —Ç–µ–º–Ω–æ–≥–æ –Ω–µ–±–∞\n`;
            auroraMessage += `‚Ä¢ –ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–ª—è—á–∏–º–∏ - –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–º—ñ–Ω—é—î—Ç—å—Å—è\n\n`;
        } else {
            auroraMessage += `‚ùå <b>–ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞ –ú–ê–õ–û–ô–ú–û–í–Ü–†–ù–Ü</b>\n`;
            auroraMessage += `üìè –í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ ${distanceToAurora.toFixed(
                1
            )}¬∞ –ø—ñ–≤–¥–µ–Ω–Ω—ñ—à–µ –∑–æ–Ω–∏ –≤–∏–¥–∏–º–æ—Å—Ç—ñ\n\n`;
            const requiredKp = Math.ceil((67 - Math.abs(magneticLat)) / 2);
            auroraMessage += `<b>üìà –î–ª—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ:</b>\n`;
            auroraMessage += `Kp ‚â• ${requiredKp} (–∑–∞—Ä–∞–∑ ${kpData.kp.toFixed(
                1
            )})\n\n`;
        }

        auroraMessage += `üìä –î–∞–Ω—ñ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –∫–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏\n`;
        auroraMessage += `üîÑ /current - –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –∫–æ—Å–º—ñ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏`;

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑", "update_aurora"),
                Markup.button.callback(
                    "üìà 3-–¥–µ–Ω—å –ø—Ä–æ–≥–Ω–æ–∑",
                    "aurora_forecast_3day"
                ),
            ],
        ]);

        await ctx.reply(auroraMessage, { ...keyboard, parse_mode: "HTML" });
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ aurora –∫–æ–º–∞–Ω–¥–∏: ${error.message}`);
        await ctx.reply(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        );
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
async function handleAlerts(ctx) {
    try {
        const alerts = await EnhancedNOAAService.getAlerts();

        if (!alerts || alerts.length === 0) {
            await ctx.reply(
                "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –Ω–µ–º–∞—î</b>\n\n" +
                    "–ö–æ—Å–º—ñ—á–Ω–∞ –ø–æ–≥–æ–¥–∞ —Å–ø–æ–∫—ñ–π–Ω–∞. –ú–∏ —Å–ø–æ–≤—ñ—Å—Ç–∏–º–æ –≤–∞—Å –ø—Ä–æ –±—É–¥—å-—è–∫—ñ –∑–º—ñ–Ω–∏.\n\n" +
                    "üîî –£–≤—ñ–º–∫–Ω—ñ—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: /settings",
                { parse_mode: "HTML" }
            );
            return;
        }

        let alertsMessage = "‚ö†Ô∏è <b>–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:</b>\n\n";

        alerts.slice(0, 5).forEach((alert, index) => {
            const type = alert.message_type || "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è";
            const time = FormatUtils.formatTimestamp(alert.issue_datetime);
            const message = (alert.message || "").substring(0, 150);
            const source = alert.source ? `(${alert.source})` : "";

            alertsMessage += `üö® <b>${type}</b> ${source}\n`;
            alertsMessage += `üïê ${time}\n`;
            alertsMessage += `üìù ${message}...\n\n`;
        });

        alertsMessage +=
            "üì° –î–∂–µ—Ä–µ–ª–æ: –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ NOAA —Ç–∞ SpaceWeatherLive";

        await ctx.reply(alertsMessage, { parse_mode: "HTML" });
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: ${error.message}`);
        await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–∞—Ç—É—Å—É API
async function handleApiStatus(ctx) {
    try {
        await ctx.answerCbQuery("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é —Å—Ç–∞—Ç—É—Å API...");

        const apiStatus = await EnhancedNOAAService.getApiStatus();

        let statusMessage = "üõ∞Ô∏è <b>–°—Ç–∞—Ç—É—Å –¥–∂–µ—Ä–µ–ª –¥–∞–Ω–∏—Ö</b>\n\n";

        // NOAA —Å—Ç–∞—Ç—É—Å
        if (apiStatus.noaa.available) {
            statusMessage += "üü¢ <b>NOAA SWPC:</b> –î–æ—Å—Ç—É–ø–Ω–∏–π\n";
            statusMessage += "üì° –û—Å–Ω–æ–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –∫–æ—Å–º—ñ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏\n";
            if (apiStatus.noaa.data) {
                statusMessage += `üî∏ –ü–æ—Ç–æ—á–Ω–∏–π Kp: ${apiStatus.noaa.data.kp}\n\n`;
            }
        } else {
            statusMessage += "üî¥ <b>NOAA SWPC:</b> –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\n";
            statusMessage += `‚ùå ${
                apiStatus.noaa.error || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è"
            }\n\n`;
        }

        // GFZ Potsdam —Å—Ç–∞—Ç—É—Å
        if (apiStatus.gfz.available) {
            statusMessage += "üü¢ <b>GFZ Potsdam:</b> –î–æ—Å—Ç—É–ø–Ω–∏–π\n";
            statusMessage += "üá©üá™ –ù—ñ–º–µ—Ü—å–∫–∞ –≥–µ–æ—Ñ—ñ–∑–∏—á–Ω–∞ —Å–ª—É–∂–±–∞ (—Ä–µ–∑–µ—Ä–≤)\n";
            if (apiStatus.gfz.data) {
                statusMessage += `üî∏ –ü–æ—Ç–æ—á–Ω–∏–π Kp: ${apiStatus.gfz.data.kp}\n\n`;
            }
        } else {
            statusMessage += "üî¥ <b>GFZ Potsdam:</b> –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\n";
            statusMessage += `‚ùå ${
                apiStatus.gfz.error || "–†–µ–∑–µ—Ä–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ"
            }\n\n`;
        }

        // –ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
        const bothWork = apiStatus.noaa.available && apiStatus.gfz.available;
        const oneWorks = apiStatus.noaa.available || apiStatus.gfz.available;

        if (bothWork) {
            statusMessage += "‚úÖ <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å:</b> –í—ñ–¥–º—ñ–Ω–Ω–∏–π\n";
            statusMessage += "üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ Kp\n";

            // –ü–æ–∫–∞–∑—É—î–º–æ —è–∫–µ –∑–Ω–∞—á–µ–Ω–Ω—è –±—É–¥–µ –≤–∏–±—Ä–∞–Ω–æ
            if (apiStatus.noaa.data && apiStatus.gfz.data) {
                const noaaKp = apiStatus.noaa.data.kp;
                const gfzKp = apiStatus.gfz.data.kp;
                const selectedKp = Math.max(noaaKp, gfzKp);
                const selectedSource =
                    noaaKp >= gfzKp ? "NOAA SWPC" : "GFZ Potsdam";
                statusMessage += `üéØ <b>–í–∏–±—Ä–∞–Ω–æ:</b> ${selectedSource} (Kp=${selectedKp})\n`;
            }
        } else if (oneWorks) {
            statusMessage += "üü° <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å:</b> –ß–∞—Å—Ç–∫–æ–≤–æ –ø—Ä–∞—Ü—é—î\n";
            statusMessage += "‚ö†Ô∏è –û–¥–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ, –ø—Ä–∞—Ü—é—î —Ä–µ–∑–µ—Ä–≤\n";
        } else {
            statusMessage +=
                "üî¥ <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å:</b> –í—Å—ñ –¥–∂–µ—Ä–µ–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ\n";
            statusMessage += "üîß –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ—Ç—å—Å—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑\n";
        }

        statusMessage += `\nüìù <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> SpaceWeatherLive –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ GFZ Potsdam —á–µ—Ä–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è API\n`;
        statusMessage += `üïê <b>–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ:</b> ${new Date().toLocaleTimeString(
            "uk-UA",
            {
                timeZone: "Europe/Kiev",
            }
        )}\n`;
        statusMessage += "üîÑ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∑–∞–ø–∏—Ç—ñ";

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–Ω–æ–≤—É", "api_status"),
                Markup.button.callback("üìä –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ", "update_current"),
            ],
            [
                Markup.button.callback("üîÆ –ü—Ä–æ–≥–Ω–æ–∑", "show_forecast"),
                Markup.button.callback("üåå –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞", "show_aurora"),
            ],
        ]);

        await ctx.reply(statusMessage, { ...keyboard, parse_mode: "HTML" });
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É API: ${error.message}`);
        await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É API");
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —á–∞—Å—É —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è
function getBestAuroraTime(latitude) {
    return (
        `üåô 22:00 - 02:00 –º—ñ—Å—Ü–µ–≤–æ–≥–æ —á–∞—Å—É\n` +
        `‚≠ê –ù–∞–π–∫—Ä–∞—â–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±–ª–∏–∑—å–∫–æ –æ–ø—ñ–≤–Ω–æ—á—ñ\n` +
        `üåÖ –£–Ω–∏–∫–∞–π—Ç–µ —Å–≤—ñ—Ç–∞–Ω–∫—É —Ç–∞ –∑–∞—Ö–æ–¥—É —Å–æ–Ω—Ü—è`
    );
}

module.exports = {
    getMainKeyboard,
    showCurrentConditions,
    handleForecast,
    handleAurora,
    handleAlerts,
    handleApiStatus,
    //handleFeedback,
    getBestAuroraTime,
    getRegionalAdvice,
    getSourceInfo,
};
