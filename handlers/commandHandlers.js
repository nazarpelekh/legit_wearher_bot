const { Markup } = require("telegraf");
const NOAAService = require("../services/noaaService");
const GeoService = require("../services/geoService");
const FormatUtils = require("../utils/formatUtils");

// –õ–æ–≥—É–≤–∞–Ω–Ω—è
const log = (message) => {
    console.log(`[${new Date().toISOString()}] ${message}`);
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
function getMainKeyboard() {
    return Markup.keyboard([
        ["üìä –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑"],
        ["üåå –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞", "‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è"],
        [Markup.button.locationRequest("üìç –û–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é")],
        ["‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"],
    ]).resize();
}

// –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É –ø–æ—Ç–æ—á–Ω–∏—Ö —É–º–æ–≤
async function showCurrentConditions(ctx, userLocations, geocodingApiKey) {
    const userId = ctx.from.id;

    try {
        const loadingMessage = await ctx.reply(
            "üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–∞–Ω—ñ –∑ —Å—É–ø—É—Ç–Ω–∏–∫—ñ–≤ NOAA..."
        );

        const [kpData, magnetometerData, solarData] = await Promise.all([
            NOAAService.getCurrentKpIndex(),
            NOAAService.getMagnetometerData(),
            NOAAService.getSolarActivity(),
        ]);

        const kpStatus = FormatUtils.getKpStatus(kpData.kp);

        let locationInfo = "";
        if (userLocations.has(userId)) {
            const location = userLocations.get(userId);
            const locationName = await GeoService.getLocationName(
                location.latitude,
                location.longitude,
                geocodingApiKey
            );
            locationInfo = `üìç <b>–õ–æ–∫–∞—Ü—ñ—è:</b> ${locationName}\n`;
        }

        const updateTime = FormatUtils.formatTimestamp(kpData.timestamp);
        const currentTime = new Date().toLocaleString("uk-UA", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
            timeZone: "Europe/Kiev",
            timeZoneName: "short",
        });

        let magneticStatus = "–°—Ç–∞–±—ñ–ª—å–Ω–µ";
        if (magnetometerData && magnetometerData.length > 0) {
            const latest = magnetometerData[magnetometerData.length - 1];
            const hp = parseFloat(latest.Hp || 0);
            if (hp > 50) magneticStatus = "–ó–±—É—Ä–µ–Ω–µ";
            else if (hp > 30) magneticStatus = "–ü–æ–º—ñ—Ä–Ω–æ –∞–∫—Ç–∏–≤–Ω–µ";
        }

        let solarStatus = "–ü–æ–º—ñ—Ä–Ω–∞";
        if (solarData && solarData.length > 0) {
            const latest = solarData[solarData.length - 1];
            const flux = parseFloat(latest.flux || 0);
            if (flux > 1e-5) solarStatus = "–ü—ñ–¥–≤–∏—â–µ–Ω–∞";
            else if (flux < 1e-7) solarStatus = "–ù–∏–∑—å–∫–∞";
        }

        const conditionsMessage = `üåå <b>–ü–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏ –∫–æ—Å–º—ñ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏</b>
üïê –î–∞–Ω—ñ NOAA: ${updateTime}
‚è∞ –ó–∞—Ä–∞–∑: ${currentTime}
${locationInfo}
<b>üî∏ –ì–µ–æ–º–∞–≥–Ω—ñ—Ç–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b>
Kp-—ñ–Ω–¥–µ–∫—Å: ${kpData.kp.toFixed(1)} ${kpStatus.emoji}
–°—Ç–∞—Ç—É—Å: ${kpStatus.status}
${kpStatus.description}

<b>üî∏ –ú–∞–≥–Ω—ñ—Ç–Ω–µ –ø–æ–ª–µ –ó–µ–º–ª—ñ:</b>
–°—Ç–∞–Ω: ${magneticStatus}
${
    magnetometerData
        ? `–î–∞–Ω—ñ –∑: ${FormatUtils.formatTimestamp(
              magnetometerData[magnetometerData.length - 1]?.time_tag
          )}`
        : "–î–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ"
}

<b>üî∏ –°–æ–Ω—è—á–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b>
–†—ñ–≤–µ–Ω—å: ${solarStatus}
X-ray flux: ${solarData ? "–ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å—Å—è" : "–ù/–î"}

<b>üåç –ü–æ—Ä–∞–¥–∏ –¥–ª—è –≤–∞—à–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É:</b>
${getRegionalAdvice(kpStatus.level, kpData.kp, userLocations.get(userId))}`;

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback("üîÑ –û–Ω–æ–≤–∏—Ç–∏", "update_current"),
                Markup.button.callback("üìà –ì—Ä–∞—Ñ—ñ–∫", "show_chart"),
            ],
            [
                Markup.button.callback("üîÆ –ü—Ä–æ–≥–Ω–æ–∑", "show_forecast"),
                Markup.button.callback("‚ö†Ô∏è –ê–ª–µ—Ä—Ç–∏", "show_alerts"),
            ],
        ]);

        await ctx.deleteMessage(loadingMessage.message_id);
        await ctx.reply(conditionsMessage, { ...keyboard, parse_mode: "HTML" });
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö —É–º–æ–≤: ${error.message}`);
        await ctx.reply(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ NOAA.\n" +
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è."
        );
    }
}

// –†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏
function getRegionalAdvice(level, kpValue, location) {
    const isHighLatitude = location && Math.abs(location.latitude) > 50;

    switch (level) {
        case "low":
            return "‚úÖ –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ";
        case "minor":
            return "üì° –ú–æ–∂–ª–∏–≤—ñ –Ω–µ–∑–Ω–∞—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ GPS";
        case "moderate":
            return isHighLatitude
                ? "üåå –ú–æ–∂–ª–∏–≤—ñ –ø–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ GPS —Ç–æ—á–Ω—ñ—Å—Ç—å"
                : "üì° –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ GPS —Ç–æ—á–Ω—ñ—Å—Ç—å";
        case "strong":
            return isHighLatitude
                ? "üö® –û—á—ñ–∫—É—é—Ç—å—Å—è —è—Å–∫—Ä–∞–≤—ñ –ø–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞! –û–±–µ—Ä–µ–∂–Ω–æ –∑ GPS —Ç–∞ —Ä–∞–¥—ñ–æ"
                : "‚ö†Ô∏è –ú–æ–∂–ª–∏–≤—ñ —Å–µ—Ä–π–æ–∑–Ω—ñ –ø–æ—Ä—É—à–µ–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó —Ç–∞ –∑–≤'—è–∑–∫—É";
        case "extreme":
            return "üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è! –ú–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó";
        default:
            return "";
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑—É
async function handleForecast(ctx, userLocations) {
    try {
        await ctx.reply("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –ø—Ä–æ–≥–Ω–æ–∑ –∑ NOAA...");

        const forecast = await NOAAService.getForecast();

        if (!forecast || forecast.length === 0) {
            await ctx.reply(
                "üìä –ü—Ä–æ–≥–Ω–æ–∑–Ω—ñ –¥–∞–Ω—ñ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.\n\n" +
                    "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /current –¥–ª—è –ø–æ—Ç–æ—á–Ω–∏—Ö —É–º–æ–≤\n" +
                    "üìû –ê–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ - NOAA –æ–Ω–æ–≤–ª—é—î –ø—Ä–æ–≥–Ω–æ–∑–∏ –¥–≤—ñ—á—ñ –Ω–∞ –¥–µ–Ω—å."
            );
            return;
        }

        let forecastMessage = "üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ –∫–æ—Å–º—ñ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏</b>\n\n";

        forecast.forEach((day, index) => {
            const kpMax = parseFloat(day.KpMax || 0);
            const status = FormatUtils.getKpStatus(kpMax);
            const confidence =
                day.confidence ||
                (index === 0 ? "–í–∏—Å–æ–∫–∞" : index === 1 ? "–ü–æ–º—ñ—Ä–Ω–∞" : "–ù–∏–∑—å–∫–∞");

            forecastMessage += `üìÖ <b>${day.DateStamp}</b>\n`;
            forecastMessage += `–ú–∞–∫—Å. Kp: ${day.KpMax} ${status.emoji}\n`;
            forecastMessage += `–°—Ç–∞—Ç—É—Å: ${status.status}\n`;
            forecastMessage += `–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –±—É—Ä: ${FormatUtils.getStormProbability(
                kpMax
            )}\n`;
            forecastMessage += `–î–æ—Å—Ç–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: ${confidence}\n\n`;
        });

        // –î–æ–¥–∞—î–º–æ –ø–æ—Ä–∞–¥–∏
        const maxKpInForecast = Math.max(
            ...forecast.map((d) => parseFloat(d.KpMax || 0))
        );
        const userId = ctx.from.id;
        const userLocation = userLocations.get(userId);

        if (userLocation && maxKpInForecast >= 5) {
            const canSeeAurora = GeoService.canSeeAurora(
                userLocation.latitude,
                userLocation.longitude,
                maxKpInForecast
            );

            if (canSeeAurora) {
                forecastMessage +=
                    "üåå <b>–ì–∞—Ä–Ω—ñ –Ω–æ–≤–∏–Ω–∏!</b> –ü—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥–Ω—ñ–≤ –º–æ–∂–ª–∏–≤—ñ –ø–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞ —É –≤–∞—à–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ!\n\n";
            }
        }

        forecastMessage +=
            "üìä <b>–î–∂–µ—Ä–µ–ª–æ:</b> NOAA Space Weather Prediction Center\n";
        forecastMessage +=
            "üîÑ <b>–û–Ω–æ–≤–ª–µ–Ω–Ω—è:</b> –¥–≤—ñ—á—ñ –Ω–∞ –¥–µ–Ω—å (06:00, 18:00 UTC)\n";
        forecastMessage += "‚ö° <b>–î–µ—Ç–∞–ª—ñ:</b> /current - –ø–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏";

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑", "update_forecast"),
                Markup.button.callback("üåå –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞", "show_aurora"),
            ],
        ]);

        await ctx.reply(forecastMessage, { ...keyboard, parse_mode: "HTML" });
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É: ${error.message}`);
        await ctx.reply(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É.\n\n" +
                "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ - –º–æ–∂–ª–∏–≤–æ, NOAA –æ–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ\n" +
                "üìä –ü–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏: /current"
        );
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —á–∞—Å—É —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è
function getBestAuroraTime(latitude) {
    return (
        `üåô 22:00 - 02:00 –º—ñ—Å—Ü–µ–≤–æ–≥–æ —á–∞—Å—É\n` +
        `‚≠ê –ù–∞–π–∫—Ä–∞—â–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±–ª–∏–∑—å–∫–æ –æ–ø—ñ–≤–Ω–æ—á—ñ\n` +
        `üåÖ –£–Ω–∏–∫–∞–π—Ç–µ —Å–≤—ñ—Ç–∞–Ω–∫—É —Ç–∞ –∑–∞—Ö–æ–¥—É —Å–æ–Ω—Ü—è`
    );
}

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤
async function handleAurora(ctx, userLocations, geocodingApiKey) {
    log(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${ctx.from.id} –∑–∞–ø–∏—Ç–∞–≤ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤`);

    const userId = ctx.from.id;
    const userLocation = userLocations.get(userId);

    if (!userLocation) {
        await ctx.reply(
            "üìç <b>–°–ø–µ—Ä—à—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é</b>\n\n" +
                "–î–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ –≤–∞—à–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è.",
            Markup.keyboard([
                [Markup.button.locationRequest("üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é")],
            ]).resize()
        );
        return;
    }

    try {
        const kpData = await NOAAService.getCurrentKpIndex();
        const { latitude, longitude } = userLocation;

        const locationName = await GeoService.getLocationName(
            latitude,
            longitude,
            geocodingApiKey
        );
        const magneticLat = GeoService.getMagneticLatitude(latitude, longitude);
        const canSeeAurora = GeoService.canSeeAurora(
            latitude,
            longitude,
            kpData.kp
        );

        const auroralBoundary = 67 - 2 * kpData.kp;
        const distanceToAurora = Math.abs(
            Math.abs(magneticLat) - auroralBoundary
        );
        const bestTime = getBestAuroraTime(latitude);

        let auroraMessage = `üåå <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤</b>\n\n`;
        auroraMessage += `üìç <b>–õ–æ–∫–∞—Ü—ñ—è:</b> ${locationName}\n`;
        auroraMessage += `üß≠ <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏:</b> ${latitude.toFixed(
            4
        )}¬∞, ${longitude.toFixed(4)}¬∞\n`;
        auroraMessage += `üß≤ <b>–ú–∞–≥–Ω—ñ—Ç–Ω–∞ —à–∏—Ä–æ—Ç–∞:</b> ${magneticLat.toFixed(
            1
        )}¬∞\n\n`;

        auroraMessage += `<b>üî∏ –ü–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏:</b>\n`;
        auroraMessage += `Kp-—ñ–Ω–¥–µ–∫—Å: ${kpData.kp.toFixed(1)}\n`;
        auroraMessage += `–ì—Ä–∞–Ω–∏—Ü—è –∞–≤—Ä–æ—Ä–∞–ª—å–Ω–æ–º—É –æ–≤–∞–ª–∞: ${auroralBoundary.toFixed(
            1
        )}¬∞ –º–∞–≥. —à–∏—Ä–æ—Ç–∏\n\n`;

        if (canSeeAurora) {
            auroraMessage += `‚úÖ <b>–ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞ –ú–û–ñ–õ–ò–í–Ü!</b>\n`;
            auroraMessage += `üéØ –í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∑–æ–Ω—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ\n`;
            auroraMessage += `üìè –í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –æ–≤–∞–ª–∞: ${distanceToAurora.toFixed(
                1
            )}¬∞\n\n`;
            auroraMessage += `<b>üïê –ù–∞–π–∫—Ä–∞—â–∏–π —á–∞—Å —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è:</b>\n${bestTime}\n\n`;
            auroraMessage += `<b>üëÄ –ü–æ—Ä–∞–¥–∏ –ø–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—é:</b>\n`;
            auroraMessage += `‚Ä¢ –î–∏–≤—ñ—Ç—å—Å—è –Ω–∞ –ø—ñ–≤–Ω—ñ—á\n`;
            auroraMessage += `‚Ä¢ –£–Ω–∏–∫–∞–π—Ç–µ —Å–≤—ñ—Ç–ª–æ–≤–æ–≥–æ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è\n`;
            auroraMessage += `‚Ä¢ –ß–µ–∫–∞–π—Ç–µ —Ç–µ–º–Ω–æ–≥–æ –Ω–µ–±–∞\n`;
            auroraMessage += `‚Ä¢ –ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–ª—è—á–∏–º–∏ - –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–º—ñ–Ω—é—î—Ç—å—Å—è\n\n`;
        } else {
            auroraMessage += `‚ùå <b>–ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞ –ú–ê–õ–û–ô–ú–û–í–Ü–†–ù–Ü</b>\n`;
            auroraMessage += `üìè –í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ ${distanceToAurora.toFixed(
                1
            )}¬∞ –ø—ñ–≤–¥–µ–Ω–Ω—ñ—à–µ –∑–æ–Ω–∏ –≤–∏–¥–∏–º–æ—Å—Ç—ñ\n\n`;
            const requiredKp = Math.ceil((67 - Math.abs(magneticLat)) / 2);
            auroraMessage += `<b>üìà –î–ª—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ:</b>\n`;
            auroraMessage += `Kp ‚â• ${requiredKp} (–∑–∞—Ä–∞–∑ ${kpData.kp.toFixed(
                1
            )})\n\n`;
        }

        auroraMessage += `üìä –î–∞–Ω—ñ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –∫–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏\n`;
        auroraMessage += `üîÑ /current - –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –∫–æ—Å–º—ñ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏`;

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑", "update_aurora"),
                Markup.button.callback(
                    "üìà 3-–¥–µ–Ω—å –ø—Ä–æ–≥–Ω–æ–∑",
                    "aurora_forecast_3day"
                ),
            ],
        ]);

        await ctx.reply(auroraMessage, { ...keyboard, parse_mode: "HTML" });
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ aurora –∫–æ–º–∞–Ω–¥–∏: ${error.message}`);
        await ctx.reply(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        );
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
async function handleAlerts(ctx) {
    try {
        const alerts = await NOAAService.getAlerts();

        if (!alerts || alerts.length === 0) {
            await ctx.reply(
                "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –Ω–µ–º–∞—î</b>\n\n" +
                    "–ö–æ—Å–º—ñ—á–Ω–∞ –ø–æ–≥–æ–¥–∞ —Å–ø–æ–∫—ñ–π–Ω–∞. –ú–∏ —Å–ø–æ–≤—ñ—Å—Ç–∏–º–æ –≤–∞—Å –ø—Ä–æ –±—É–¥—å-—è–∫—ñ –∑–º—ñ–Ω–∏.\n\n" +
                    "üîî –£–≤—ñ–º–∫–Ω—ñ—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: /settings"
            );
            return;
        }

        let alertsMessage = "‚ö†Ô∏è <b>–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:</b>\n\n";

        alerts.slice(0, 5).forEach((alert, index) => {
            const type = alert.message_type || "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è";
            const time = FormatUtils.formatTimestamp(alert.issue_datetime);
            const message = (alert.message || "").substring(0, 150);

            alertsMessage +=
                `üö® <b>${type}</b>\n` + `üïê ${time}\n` + `üìù ${message}...\n\n`;
        });

        alertsMessage += "üì° –î–∂–µ—Ä–µ–ª–æ: NOAA Space Weather Prediction Center";

        await ctx.reply(alertsMessage, { parse_mode: "HTML" });
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: ${error.message}`);
        await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
}

module.exports = {
    getMainKeyboard,
    showCurrentConditions,
    handleForecast,
    handleAurora,
    handleAlerts,
    getBestAuroraTime,
    getRegionalAdvice,
};
