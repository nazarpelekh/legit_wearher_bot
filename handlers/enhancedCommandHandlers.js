const { Markup } = require("telegraf");
const EnhancedNOAAService = require("../services/enhancedNoaaService");
const GeoService = require("../services/geoService");
const FormatUtils = require("../utils/formatUtils");

// –õ–æ–≥—É–≤–∞–Ω–Ω—è
const log = (message) => {
    console.log(`[${new Date().toISOString()}] ${message}`);
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
function getMainKeyboard() {
    return Markup.keyboard([
        ["üìä –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑"],
        ["üåå –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞", "‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è"],
        [Markup.button.locationRequest("üìç –û–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é")],
        ["‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"],
    ]).resize();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É NOAA
function parseNoaaTextForecast(textData) {
    const lines = textData.split("\n");
    const result = {
        days: [],
        hourlyData: [],
    };

    let datesLine = null;
    let dates = [];

    log("–ü–æ—á–∞–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É NOAA");

    // –®—É–∫–∞—î–º–æ —Ä—è–¥–æ–∫ –∑ –¥–∞—Ç–∞–º–∏
    for (const line of lines) {
        if (
            line.includes("Sep") ||
            line.includes("Oct") ||
            line.includes("Nov") ||
            line.includes("Jan") ||
            line.includes("Feb") ||
            line.includes("Mar") ||
            line.includes("Apr") ||
            line.includes("May") ||
            line.includes("Jun") ||
            line.includes("Jul") ||
            line.includes("Aug") ||
            line.includes("Dec")
        ) {
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –¥–∞—Ç–∏ –≤ —Ä—è–¥–∫—É
            const dateRegex = /(\w{3})\s+(\d{1,2})/g;
            const dateMatches = [...line.matchAll(dateRegex)];

            if (dateMatches.length >= 2) {
                dates = dateMatches.map((match) => ({
                    month: match[1],
                    day: parseInt(match[2]),
                }));
                datesLine = line;
                break;
            }
        }
    }

    if (dates.length === 0) {
        log("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç –≤ –ø—Ä–æ–≥–Ω–æ–∑—ñ");
        return null;
    }

    log(`–ó–Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç–∏: ${dates.map((d) => `${d.month} ${d.day}`).join(", ")}`);

    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞—Ç–∏ –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    const monthNames = {
        Jan: "–°—ñ—á–Ω—è",
        Feb: "–õ—é—Ç–æ–≥–æ",
        Mar: "–ë–µ—Ä–µ–∑–Ω—è",
        Apr: "–ö–≤—ñ—Ç–Ω—è",
        May: "–¢—Ä–∞–≤–Ω—è",
        Jun: "–ß–µ—Ä–≤–Ω—è",
        Jul: "–õ–∏–ø–Ω—è",
        Aug: "–°–µ—Ä–ø–Ω—è",
        Sep: "–í–µ—Ä–µ—Å–Ω—è",
        Oct: "–ñ–æ–≤—Ç–Ω—è",
        Nov: "–õ–∏—Å—Ç–æ–ø–∞–¥–∞",
        Dec: "–ì—Ä—É–¥–Ω—è",
    };

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–Ω—ñ
    dates.forEach((date) => {
        result.days.push({
            dateStamp: `${String(date.day).padStart(2, "0")} ${
                monthNames[date.month]
            }`,
            originalDate: date,
            maxKp: 0,
            hourlyData: [],
        });
    });

    // –ü–∞—Ä—Å–∏–º–æ –ø–æ—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
    for (const line of lines) {
        const utcMatch = line.match(/^(\d{2}-\d{2})UT\s+(.+)$/);
        if (utcMatch) {
            const timeRange = utcMatch[1]; // –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "09-12"
            const kpValues = utcMatch[2].trim().split(/\s+/);

            const [startHour, endHour] = timeRange.split("-").map(Number);

            // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ UTC –≤ –∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å (+3 –≥–æ–¥–∏–Ω–∏)
            let kyivStart = (startHour + 3) % 24;
            let kyivEnd = (endHour + 3) % 24;

            // –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É —á–µ—Ä–µ–∑ –ø—ñ–≤–Ω—ñ—á
            if (endHour === 0) {
                kyivEnd = 3;
            }

            const kyivTimeRange = `${String(kyivStart).padStart(
                2,
                "0"
            )}:00-${String(kyivEnd).padStart(2, "0")}:00`;

            log(`UTC ${timeRange} ‚Üí –ö–∏—ó–≤ ${kyivTimeRange}`);

            kpValues.forEach((kpStr, dayIndex) => {
                if (dayIndex < result.days.length && kpStr && kpStr !== "-") {
                    const kpValue = parseFloat(kpStr);
                    if (!isNaN(kpValue)) {
                        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–æ —è–∫–æ–≥–æ –¥–Ω—è –Ω–∞–ª–µ–∂–∏—Ç—å —Ü–µ–π —á–∞—Å
                        let targetDayIndex = dayIndex;

                        // –Ø–∫—â–æ –∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å (21-00 UTC —Å—Ç–∞—î 00-03 –ö–∏—ó–≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è)
                        if (startHour >= 21 && kyivStart < 6) {
                            targetDayIndex = Math.min(
                                dayIndex + 1,
                                result.days.length - 1
                            );
                        }

                        if (targetDayIndex < result.days.length) {
                            result.days[targetDayIndex].hourlyData.push({
                                timeRange: kyivTimeRange,
                                kp: kpValue.toFixed(1),
                                utcTime: timeRange,
                                originalHour: startHour,
                            });

                            // –û–Ω–æ–≤–ª—é—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π Kp
                            result.days[targetDayIndex].maxKp = Math.max(
                                result.days[targetDayIndex].maxKp,
                                kpValue
                            );
                        }
                    }
                }
            });
        }
    }

    // –°–æ—Ä—Ç—É—î–º–æ –ø–æ—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –∑–∞ —á–∞—Å–æ–º
    result.days.forEach((day, index) => {
        day.hourlyData.sort((a, b) => {
            const aHour = parseInt(a.timeRange.split(":")[0]);
            const bHour = parseInt(b.timeRange.split(":")[0]);
            return aHour - bHour;
        });
        day.maxKp = day.maxKp.toFixed(1);

        log(
            `–î–µ–Ω—å ${index} (${day.dateStamp}): ${day.hourlyData.length} —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤, –º–∞–∫—Å Kp: ${day.maxKp}`
        );
    });

    return result;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ Kp –∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
function getCurrentKpFromTextForecast(parsedForecast) {
    if (!parsedForecast || !parsedForecast.days.length) {
        log("–ù–µ–º–∞—î —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É");
        return null;
    }

    const now = new Date();
    const currentHour = now.getHours();
    const currentDay = now.getDate();

    log(
        `–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: ${currentHour}:${now.getMinutes()}, –¥–µ–Ω—å: ${currentDay}`
    );

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å
    const todayData = parsedForecast.days.find((day) => {
        const dayNum = day.originalDate.day;
        return dayNum === currentDay;
    });

    if (!todayData || !todayData.hourlyData.length) {
        log("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω—ñ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ");
        log(
            `–î–æ—Å—Ç—É–ø–Ω—ñ –¥–Ω—ñ: ${parsedForecast.days
                .map((d) => d.originalDate.day)
                .join(", ")}`
        );
        return null;
    }

    log(
        `–ó–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω—ñ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑ ${todayData.hourlyData.length} —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏`
    );

    // –®—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —á–∞—Å–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
    for (const hourData of todayData.hourlyData) {
        const [startTime, endTime] = hourData.timeRange.split("-");
        const startHour = parseInt(startTime.split(":")[0]);
        const endHour = parseInt(endTime.split(":")[0]);

        let isInRange = false;
        if (endHour > startHour) {
            isInRange = currentHour >= startHour && currentHour < endHour;
        } else {
            // –ü–µ—Ä–µ—Ö—ñ–¥ —á–µ—Ä–µ–∑ –ø—ñ–≤–Ω—ñ—á
            isInRange = currentHour >= startHour || currentHour < endHour;
        }

        log(
            `–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª ${hourData.timeRange}: ${startHour}-${endHour}, –ø–æ—Ç–æ—á–Ω–∏–π: ${currentHour}, –ø—ñ–¥—Ö–æ–¥–∏—Ç—å: ${isInRange}`
        );

        if (isInRange) {
            log(
                `‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª: ${hourData.timeRange}, Kp: ${hourData.kp}`
            );
            return {
                kp: parseFloat(hourData.kp),
                timeRange: hourData.timeRange,
                source: "noaa-forecast",
            };
        }
    }

    log("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É");
    return null;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞–π–±—É—Ç–Ω—ñ—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –¢–Ü–õ–¨–ö–ò –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
function getTodayFutureIntervalsFromTextForecast(parsedForecast) {
    if (!parsedForecast || !parsedForecast.days.length) {
        return [];
    }

    const now = new Date();
    const currentHour = now.getHours();
    const currentDay = now.getDate();

    const futureIntervals = [];

    // –ë–µ—Ä–µ–º–æ –¢–Ü–õ–¨–ö–ò –º–∞–π–±—É—Ç–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ —Å—å–æ–≥–æ–¥–Ω—ñ
    const todayData = parsedForecast.days.find((day) => {
        const dayNum = day.originalDate.day;
        return dayNum === currentDay;
    });

    if (todayData) {
        const todayFuture = todayData.hourlyData.filter((hourData) => {
            const startHour = parseInt(hourData.timeRange.split(":")[0]);
            return startHour > currentHour;
        });

        log(`–°—å–æ–≥–æ–¥–Ω—ñ –º–∞–π–±—É—Ç–Ω—ñ—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤: ${todayFuture.length}`);

        futureIntervals.push(
            ...todayFuture.map((h) => ({
                ...h,
                date: todayData.dateStamp,
            }))
        );
    }

    log(`–°—å–æ–≥–æ–¥–Ω—ñ –º–∞–π–±—É—Ç–Ω—ñ—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤: ${futureIntervals.length}`);
    return futureIntervals;
}

// –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É –ø–æ—Ç–æ—á–Ω–∏—Ö —É–º–æ–≤ (—Ç—ñ–ª—å–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ)
async function showCurrentConditions(ctx, userLocations, geocodingApiKey) {
    const userId = ctx.from.id;

    try {
        const loadingMessage = await ctx.reply("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–∞–Ω—ñ –∑ NOAA...");

        log("=== –ü–û–ß–ê–¢–û–ö showCurrentConditions ===");

        // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–ø—Ä—è–º—É
        log("–û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑ NOAA...");
        const textForecast = await EnhancedNOAAService.getNoaaData(
            "/text/3-day-geomag-forecast.txt"
        );

        if (!textForecast) {
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑");
        }

        log("–¢–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ä–∏–º–∞–Ω–æ, –ø–∞—Ä—Å–∏–º–æ...");
        const parsedForecast = parseNoaaTextForecast(textForecast);

        if (!parsedForecast) {
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–∞—Ä—Å–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑");
        }

        log("–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ");

        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π Kp
        let currentKpData = getCurrentKpFromTextForecast(parsedForecast);

        // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API
        if (!currentKpData) {
            log(
                "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç–æ—á–Ω–∏–π Kp –≤ –ø—Ä–æ–≥–Ω–æ–∑—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π API"
            );
            const apiKpData = await EnhancedNOAAService.getCurrentKpIndex();
            currentKpData = {
                kp: apiKpData.kp,
                timeRange: null,
                source: apiKpData.source,
            };
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –¢–Ü–õ–¨–ö–ò —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –º–∞–π–±—É—Ç–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏
        const todayFutureIntervals =
            getTodayFutureIntervalsFromTextForecast(parsedForecast);

        let todayHourlyData = "";
        if (todayFutureIntervals.length > 0) {
            todayHourlyData =
                "\n<b>üïê –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (–∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å):</b>\n";

            todayFutureIntervals.forEach((interval) => {
                const hourKp = parseFloat(interval.kp);
                const hourStatus = FormatUtils.getKpStatus(hourKp);
                todayHourlyData += `${interval.timeRange}: ${interval.kp} ${hourStatus.emoji}\n`;
            });
        } else {
            todayHourlyData =
                "\n<i>–°—å–æ–≥–æ–¥–Ω—ñ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤</i>\n";
        }

        const kpStatus = FormatUtils.getKpStatus(currentKpData.kp);

        let locationInfo = "";
        if (userLocations.has(userId)) {
            const location = userLocations.get(userId);
            const locationName = await GeoService.getLocationName(
                location.latitude,
                location.longitude,
                geocodingApiKey
            );
            locationInfo = `üìç <b>–õ–æ–∫–∞—Ü—ñ—è:</b> ${locationName}\n`;
        }

        const updateTime = new Date().toLocaleString("uk-UA", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
            timeZone: "Europe/Kiev",
            timeZoneName: "short",
        });

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö
        let sourceInfo = "üì° <b>–î–∂–µ—Ä–µ–ª–æ:</b> ";
        if (currentKpData.source === "noaa-forecast") {
            sourceInfo += "NOAA SWPC (—Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑)";
        } else if (currentKpData.source === "noaa") {
            sourceInfo += "NOAA SWPC (API)";
        } else if (currentKpData.source === "gfz-potsdam") {
            sourceInfo += "GFZ Potsdam";
        } else {
            sourceInfo += "–†–µ–∑–µ—Ä–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ";
        }

        let conditionsMessage = `üåå <b>–ö–æ—Å–º—ñ—á–Ω–∞ –ø–æ–≥–æ–¥–∞</b>
üïê –û–Ω–æ–≤–ª–µ–Ω–æ: ${updateTime}
${locationInfo}
${sourceInfo}

<b>üî∏ –ü–æ—Ç–æ—á–Ω–∞ –≥–µ–æ–º–∞–≥–Ω—ñ—Ç–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b>
Kp-—ñ–Ω–¥–µ–∫—Å: ${currentKpData.kp.toFixed(1)} ${kpStatus.emoji}`;

        // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Å–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª, —è–∫—â–æ —î
        if (currentKpData.timeRange) {
            conditionsMessage += ` (${currentKpData.timeRange})`;
        }

        conditionsMessage += `
–°—Ç–∞—Ç—É—Å: ${kpStatus.status}
${kpStatus.description}
${todayHourlyData}
<b>üåç –ü–æ—Ä–∞–¥–∏ –¥–ª—è –≤–∞—à–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É:</b>
${getRegionalAdvice(
    kpStatus.level,
    currentKpData.kp,
    userLocations.get(userId)
)}`;

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback("üîÑ –û–Ω–æ–≤–∏—Ç–∏", "update_current"),
                Markup.button.callback("üìà –ì—Ä–∞—Ñ—ñ–∫ 9 –≥–æ–¥", "show_chart"),
            ],
            [
                Markup.button.callback("üîÆ –ü—Ä–æ–≥–Ω–æ–∑", "show_forecast"),
                Markup.button.callback("üåå –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞", "show_aurora"),
            ],
        ]);

        await ctx.deleteMessage(loadingMessage.message_id);
        await ctx.reply(conditionsMessage, { ...keyboard, parse_mode: "HTML" });

        log("=== –ö–Ü–ù–ï–¶–¨ showCurrentConditions ===");
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞: ${error.message}`);
        try {
            await ctx.deleteMessage(loadingMessage.message_id);
        } catch (deleteError) {
            // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        }
        await ctx.reply(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ NOAA.\n" +
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è."
        );
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ 3-–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
async function handleForecast(ctx, userLocations) {
    try {
        const loadingMessage = await ctx.reply(
            "üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é 3-–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –∑ NOAA..."
        );

        log("=== –ü–û–ß–ê–¢–û–ö handleForecast ===");

        // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–ø—Ä—è–º—É
        const textForecast = await EnhancedNOAAService.getNoaaData(
            "/text/3-day-geomag-forecast.txt"
        );

        if (!textForecast) {
            await ctx.deleteMessage(loadingMessage.message_id);
            await ctx.reply(
                "üìä –ü—Ä–æ–≥–Ω–æ–∑–Ω—ñ –¥–∞–Ω—ñ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –∑ NOAA.\n\n" +
                    "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /current –¥–ª—è –ø–æ—Ç–æ—á–Ω–∏—Ö —É–º–æ–≤\n" +
                    "üìû –ê–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ - NOAA –æ–Ω–æ–≤–ª—é—î –ø—Ä–æ–≥–Ω–æ–∑–∏ –¥–≤—ñ—á—ñ –Ω–∞ –¥–µ–Ω—å."
            );
            return;
        }

        const parsedForecast = parseNoaaTextForecast(textForecast);

        if (!parsedForecast || !parsedForecast.days.length) {
            await ctx.deleteMessage(loadingMessage.message_id);
            await ctx.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ NOAA.");
            return;
        }

        let forecastMessage = "üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ –∫–æ—Å–º—ñ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏ –Ω–∞ 3 –¥–Ω—ñ</b>\n\n";
        forecastMessage +=
            "üì° <b>–î–∂–µ—Ä–µ–ª–æ:</b> NOAA SWPC (—Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑)\n\n";

        // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ 3 –¥–Ω—ñ –∑ –ø–æ–≤–Ω–∏–º–∏ –ø–æ—á–∞—Å–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
        parsedForecast.days.forEach((day, index) => {
            const maxKp = parseFloat(day.maxKp);
            const status = FormatUtils.getKpStatus(maxKp);

            forecastMessage += `üìÖ <b>${day.dateStamp}</b>\n`;
            forecastMessage += `–ú–∞–∫—Å. Kp: ${day.maxKp} ${status.emoji}\n`;
            forecastMessage += `–°—Ç–∞—Ç—É—Å: ${status.status}\n`;
            forecastMessage += `–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –±—É—Ä: ${FormatUtils.getStormProbability(
                maxKp
            )}\n`;

            // –î–æ–¥–∞—î–º–æ –ø–æ—á–∞—Å–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è
            if (day.hourlyData && day.hourlyData.length > 0) {
                forecastMessage += `\n<b>–ü–æ—á–∞—Å–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (–∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å):</b>\n`;
                day.hourlyData.forEach((hour) => {
                    const hourKp = parseFloat(hour.kp);
                    const hourStatus = FormatUtils.getKpStatus(hourKp);
                    forecastMessage += `${hour.timeRange}: ${hour.kp} ${hourStatus.emoji}\n`;
                });
            }

            forecastMessage += `\n`;
        });

        // –î–æ–¥–∞—î–º–æ –ø–æ—Ä–∞–¥–∏ –ø—Ä–æ –ø–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞
        const maxKpInForecast = Math.max(
            ...parsedForecast.days.map((d) => parseFloat(d.maxKp))
        );
        const userId = ctx.from.id;
        const userLocation = userLocations.get(userId);

        if (userLocation && maxKpInForecast >= 5) {
            const canSeeAurora = GeoService.canSeeAurora(
                userLocation.latitude,
                userLocation.longitude,
                maxKpInForecast
            );

            if (canSeeAurora) {
                forecastMessage +=
                    "üåå <b>–ì–∞—Ä–Ω—ñ –Ω–æ–≤–∏–Ω–∏!</b> –ü—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥–Ω—ñ–≤ –º–æ–∂–ª–∏–≤—ñ –ø–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞ —É –≤–∞—à–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ!\n\n";
            }
        }

        forecastMessage +=
            "‚úÖ <b>–ù–∞–¥—ñ–π–Ω—ñ—Å—Ç—å:</b> –í–∏—Å–æ–∫–∞ (–æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π NOAA –ø—Ä–æ–≥–Ω–æ–∑)\n";
        forecastMessage +=
            "üîÑ <b>–û–Ω–æ–≤–ª–µ–Ω–Ω—è:</b> –¥–≤—ñ—á—ñ –Ω–∞ –¥–µ–Ω—å (06:00, 18:00 UTC)\n";
        forecastMessage += "‚ö° <b>–ü–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏:</b> /current";

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑", "update_forecast"),
                Markup.button.callback("üåå –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞", "show_aurora"),
            ],
            [
                Markup.button.callback("üìä –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ", "update_current"),
                Markup.button.callback("üõ∞Ô∏è –°—Ç–∞—Ç—É—Å API", "api_status"),
            ],
        ]);

        await ctx.deleteMessage(loadingMessage.message_id);
        await ctx.reply(forecastMessage, { ...keyboard, parse_mode: "HTML" });

        log("=== –ö–Ü–ù–ï–¶–¨ handleForecast ===");
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É: ${error.message}`);
        try {
            await ctx.deleteMessage(loadingMessage.message_id);
        } catch (deleteError) {}
        await ctx.reply(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –∑ NOAA.\n\n" +
                "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ\n" +
                "üìä –ü–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏: /current"
        );
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–∞
function getSourceInfo(kpData) {
    const sourceEmoji = {
        noaa: "üõ∞Ô∏è",
        "gfz-potsdam": "üá©üá™",
        "noaa-forecast": "üìã",
        fallback: "‚ö†Ô∏è",
        generated: "üîß",
    };

    const sourceName = {
        noaa: "NOAA SWPC",
        "gfz-potsdam": "GFZ Potsdam",
        "noaa-forecast": "NOAA –ø—Ä–æ–≥–Ω–æ–∑",
        fallback: "–ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º",
        generated: "–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ",
    };

    let sourceInfo = `${
        sourceEmoji[kpData.source] || "üì°"
    } <b>–î–∂–µ—Ä–µ–ª–æ Kp:</b> ${sourceName[kpData.source] || "–ù–µ–≤—ñ–¥–æ–º–µ"}\n`;

    if (kpData.bothAvailable) {
        sourceInfo += `‚úÖ <b>–†–µ–∑–µ—Ä–≤–Ω–µ API:</b> –î–æ—Å—Ç—É–ø–Ω–µ (${kpData.backupValue})\n`;
        sourceInfo += `üîÑ <b>–ü—Ä–∞–≤–∏–ª–æ:</b> –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è\n`;
    } else if (kpData.hasBackup === false) {
        sourceInfo += `‚ö†Ô∏è <b>–†–µ–∑–µ—Ä–≤–Ω–µ API:</b> ${
            kpData.fallbackReason || "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–µ"
        }\n`;
    }

    return sourceInfo;
}

// –†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏
function getRegionalAdvice(level, kpValue, location) {
    const isHighLatitude = location && Math.abs(location.latitude) > 50;

    switch (level) {
        case "low":
            return "‚úÖ –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ";
        case "minor":
            return "üì° –ú–æ–∂–ª–∏–≤—ñ –Ω–µ–∑–Ω–∞—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ GPS";
        case "moderate":
            return isHighLatitude
                ? "üåå –ú–æ–∂–ª–∏–≤—ñ –ø–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ GPS —Ç–æ—á–Ω—ñ—Å—Ç—å"
                : "üì° –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ GPS —Ç–æ—á–Ω—ñ—Å—Ç—å";
        case "strong":
            return isHighLatitude
                ? "üö® –û—á—ñ–∫—É—é—Ç—å—Å—è —è—Å–∫—Ä–∞–≤—ñ –ø–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞! –û–±–µ—Ä–µ–∂–Ω–æ –∑ GPS —Ç–∞ —Ä–∞–¥—ñ–æ"
                : "‚ö†Ô∏è –ú–æ–∂–ª–∏–≤—ñ —Å–µ—Ä–π–æ–∑–Ω—ñ –ø–æ—Ä—É—à–µ–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó —Ç–∞ –∑–≤'—è–∑–∫—É";
        case "extreme":
            return "üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è! –ú–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó";
        default:
            return "";
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤
async function handleAurora(ctx, userLocations, geocodingApiKey) {
    log(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${ctx.from.id} –∑–∞–ø–∏—Ç–∞–≤ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤`);

    const userId = ctx.from.id;
    const userLocation = userLocations.get(userId);

    if (!userLocation) {
        log(`–õ–æ–∫–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`);
        await ctx.reply(
            "üìç <b>–°–ø–µ—Ä—à—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é</b>\n\n" +
                "–î–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ –≤–∞—à–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è.\n\n" +
                "üí° <b>–ü—ñ–¥–∫–∞–∑–∫–∞:</b> –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –º–µ–Ω—é Telegram (üìé ‚Üí –õ–æ–∫–∞—Ü—ñ—è).",
            {
                ...Markup.keyboard([
                    [Markup.button.locationRequest("üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é")],
                    ["üìä –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑"],
                    ["‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"],
                ]).resize(),
                parse_mode: "HTML",
            }
        );
        return;
    }

    try {
        const kpData = await EnhancedNOAAService.getCurrentKpIndex();
        const { latitude, longitude } = userLocation;

        const locationName = await GeoService.getLocationName(
            latitude,
            longitude,
            geocodingApiKey
        );

        let magneticLat;
        try {
            magneticLat = GeoService.getMagneticLatitude(latitude, longitude);
        } catch (error) {
            log(`–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–∞–≥–Ω—ñ—Ç–Ω–æ—ó —à–∏—Ä–æ—Ç–∏: ${error.message}`);
            magneticLat = latitude - 11;
        }

        const canSeeAurora = GeoService.canSeeAurora(
            latitude,
            longitude,
            kpData.kp
        );

        const auroralBoundary = 67 - 2 * kpData.kp;
        const distanceToAurora = Math.abs(
            Math.abs(magneticLat) - auroralBoundary
        );
        const bestTime = getBestAuroraTime(latitude);

        let auroraMessage = `üåå <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤</b>\n\n`;
        auroraMessage += `üìç <b>–õ–æ–∫–∞—Ü—ñ—è:</b> ${locationName}\n`;
        auroraMessage += `üß≠ <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏:</b> ${latitude.toFixed(
            4
        )}¬∞, ${longitude.toFixed(4)}¬∞\n`;
        auroraMessage += `üß≤ <b>–ú–∞–≥–Ω—ñ—Ç–Ω–∞ —à–∏—Ä–æ—Ç–∞:</b> ${magneticLat.toFixed(
            1
        )}¬∞\n\n`;

        const sourceEmoji = { noaa: "üõ∞Ô∏è", "gfz-potsdam": "üá©üá™", fallback: "‚ö†Ô∏è" };
        const sourceName = {
            noaa: "NOAA",
            "gfz-potsdam": "GFZ Potsdam",
            fallback: "–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º",
        };
        auroraMessage += `${
            sourceEmoji[kpData.source] || "üì°"
        } <b>–î–∂–µ—Ä–µ–ª–æ Kp:</b> ${sourceName[kpData.source] || "–ù–µ–≤—ñ–¥–æ–º–µ"}\n`;

        if (kpData.bothAvailable) {
            auroraMessage += `üîÑ <b>–†–µ–∑–µ—Ä–≤:</b> ${kpData.backupValue} (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –±—ñ–ª—å—à–µ)\n`;
        }

        auroraMessage += `<b>üî∏ –ü–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏:</b>\n`;
        auroraMessage += `Kp-—ñ–Ω–¥–µ–∫—Å: ${kpData.kp.toFixed(1)}\n`;
        auroraMessage += `–ì—Ä–∞–Ω–∏—Ü—è –∞–≤—Ä–æ—Ä–∞–ª—å–Ω–æ–º—É –æ–≤–∞–ª–∞: ${auroralBoundary.toFixed(
            1
        )}¬∞ –º–∞–≥. —à–∏—Ä–æ—Ç–∏\n\n`;

        if (canSeeAurora) {
            auroraMessage += `‚úÖ <b>–ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞ –ú–û–ñ–õ–ò–í–Ü!</b>\n`;
            auroraMessage += `üéØ –í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∑–æ–Ω—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ\n`;
            auroraMessage += `üìè –í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –æ–≤–∞–ª–∞: ${distanceToAurora.toFixed(
                1
            )}¬∞\n\n`;
            auroraMessage += `<b>üïê –ù–∞–π–∫—Ä–∞—â–∏–π —á–∞—Å —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è:</b>\n${bestTime}\n\n`;
            auroraMessage += `<b>üëÄ –ü–æ—Ä–∞–¥–∏ –ø–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—é:</b>\n`;
            auroraMessage += `‚Ä¢ –î–∏–≤—ñ—Ç—å—Å—è –Ω–∞ –ø—ñ–≤–Ω—ñ—á\n`;
            auroraMessage += `‚Ä¢ –£–Ω–∏–∫–∞–π—Ç–µ —Å–≤—ñ—Ç–ª–æ–≤–æ–≥–æ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è\n`;
            auroraMessage += `‚Ä¢ –ß–µ–∫–∞–π—Ç–µ —Ç–µ–º–Ω–æ–≥–æ –Ω–µ–±–∞\n`;
            auroraMessage += `‚Ä¢ –ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–ª—è—á–∏–º–∏ - –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–º—ñ–Ω—é—î—Ç—å—Å—è\n\n`;
        } else {
            auroraMessage += `‚ùå <b>–ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞ –ú–ê–õ–û–ô–ú–û–í–Ü–†–ù–Ü</b>\n`;
            auroraMessage += `üìè –í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ ${distanceToAurora.toFixed(
                1
            )}¬∞ –ø—ñ–≤–¥–µ–Ω–Ω—ñ—à–µ –∑–æ–Ω–∏ –≤–∏–¥–∏–º–æ—Å—Ç—ñ\n\n`;
            const requiredKp = Math.ceil((67 - Math.abs(magneticLat)) / 2);
            auroraMessage += `<b>üìà –î–ª—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ:</b>\n`;
            auroraMessage += `Kp ‚â• ${requiredKp} (–∑–∞—Ä–∞–∑ ${kpData.kp.toFixed(
                1
            )})\n\n`;
        }

        auroraMessage += `üìä –î–∞–Ω—ñ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –∫–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏\n`;
        auroraMessage += `üîÑ /current - –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –∫–æ—Å–º—ñ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏`;

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑", "update_aurora"),
                Markup.button.callback(
                    "üìà 3-–¥–µ–Ω—å –ø—Ä–æ–≥–Ω–æ–∑",
                    "aurora_forecast_3day"
                ),
            ],
        ]);

        await ctx.reply(auroraMessage, { ...keyboard, parse_mode: "HTML" });
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ aurora –∫–æ–º–∞–Ω–¥–∏: ${error.message}`);
        await ctx.reply(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–ª—è—Ä–Ω–∏—Ö —Å—è–π–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        );
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
async function handleAlerts(ctx) {
    try {
        const alerts = await EnhancedNOAAService.getAlerts();

        if (!alerts || alerts.length === 0) {
            await ctx.reply(
                "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –Ω–µ–º–∞—î</b>\n\n" +
                    "–ö–æ—Å–º—ñ—á–Ω–∞ –ø–æ–≥–æ–¥–∞ —Å–ø–æ–∫—ñ–π–Ω–∞. –ú–∏ —Å–ø–æ–≤—ñ—Å—Ç–∏–º–æ –≤–∞—Å –ø—Ä–æ –±—É–¥—å-—è–∫—ñ –∑–º—ñ–Ω–∏.\n\n" +
                    "üîî –£–≤—ñ–º–∫–Ω—ñ—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: /settings",
                { parse_mode: "HTML" }
            );
            return;
        }

        let alertsMessage = "‚ö†Ô∏è <b>–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:</b>\n\n";

        alerts.slice(0, 5).forEach((alert, index) => {
            const type = alert.message_type || "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è";
            const time = FormatUtils.formatTimestamp(alert.issue_datetime);
            const message = (alert.message || "").substring(0, 150);
            const source = alert.source ? `(${alert.source})` : "";

            alertsMessage += `üö® <b>${type}</b> ${source}\n`;
            alertsMessage += `üïê ${time}\n`;
            alertsMessage += `üìù ${message}...\n\n`;
        });

        alertsMessage +=
            "üì° –î–∂–µ—Ä–µ–ª–æ: –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ NOAA —Ç–∞ SpaceWeatherLive";

        await ctx.reply(alertsMessage, { parse_mode: "HTML" });
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: ${error.message}`);
        await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–∞—Ç—É—Å—É API
async function handleApiStatus(ctx) {
    try {
        await ctx.answerCbQuery("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é —Å—Ç–∞—Ç—É—Å API...");

        const apiStatus = await EnhancedNOAAService.getApiStatus();

        let statusMessage = "üõ∞Ô∏è <b>–°—Ç–∞—Ç—É—Å –¥–∂–µ—Ä–µ–ª –¥–∞–Ω–∏—Ö</b>\n\n";

        // NOAA —Å—Ç–∞—Ç—É—Å
        if (apiStatus.noaa.available) {
            statusMessage += "üü¢ <b>NOAA SWPC:</b> –î–æ—Å—Ç—É–ø–Ω–∏–π\n";
            statusMessage += "üì° –û—Å–Ω–æ–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –∫–æ—Å–º—ñ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏\n";
            if (apiStatus.noaa.data) {
                statusMessage += `üî∏ –ü–æ—Ç–æ—á–Ω–∏–π Kp: ${apiStatus.noaa.data.kp}\n\n`;
            }
        } else {
            statusMessage += "üî¥ <b>NOAA SWPC:</b> –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\n";
            statusMessage += `‚ùå ${
                apiStatus.noaa.error || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è"
            }\n\n`;
        }

        // GFZ Potsdam —Å—Ç–∞—Ç—É—Å
        if (apiStatus.gfz.available) {
            statusMessage += "üü¢ <b>GFZ Potsdam:</b> –î–æ—Å—Ç—É–ø–Ω–∏–π\n";
            statusMessage += "üá©üá™ –ù—ñ–º–µ—Ü—å–∫–∞ –≥–µ–æ—Ñ—ñ–∑–∏—á–Ω–∞ —Å–ª—É–∂–±–∞ (—Ä–µ–∑–µ—Ä–≤)\n";
            if (apiStatus.gfz.data) {
                statusMessage += `üî∏ –ü–æ—Ç–æ—á–Ω–∏–π Kp: ${apiStatus.gfz.data.kp}\n\n`;
            }
        } else {
            statusMessage += "üî¥ <b>GFZ Potsdam:</b> –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\n";
            statusMessage += `‚ùå ${
                apiStatus.gfz.error || "–†–µ–∑–µ—Ä–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ"
            }\n\n`;
        }

        // –ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
        const bothWork = apiStatus.noaa.available && apiStatus.gfz.available;
        const oneWorks = apiStatus.noaa.available || apiStatus.gfz.available;

        if (bothWork) {
            statusMessage += "‚úÖ <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å:</b> –í—ñ–¥–º—ñ–Ω–Ω–∏–π\n";
            statusMessage += "üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ Kp\n";

            // –ü–æ–∫–∞–∑—É—î–º–æ —è–∫–µ –∑–Ω–∞—á–µ–Ω–Ω—è –±—É–¥–µ –≤–∏–±—Ä–∞–Ω–æ
            if (apiStatus.noaa.data && apiStatus.gfz.data) {
                const noaaKp = apiStatus.noaa.data.kp;
                const gfzKp = apiStatus.gfz.data.kp;
                const selectedKp = Math.max(noaaKp, gfzKp);
                const selectedSource =
                    noaaKp >= gfzKp ? "NOAA SWPC" : "GFZ Potsdam";
                statusMessage += `üéØ <b>–í–∏–±—Ä–∞–Ω–æ:</b> ${selectedSource} (Kp=${selectedKp})\n`;
            }
        } else if (oneWorks) {
            statusMessage += "üü° <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å:</b> –ß–∞—Å—Ç–∫–æ–≤–æ –ø—Ä–∞—Ü—é—î\n";
            statusMessage += "‚ö†Ô∏è –û–¥–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ, –ø—Ä–∞—Ü—é—î —Ä–µ–∑–µ—Ä–≤\n";
        } else {
            statusMessage +=
                "üî¥ <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å:</b> –í—Å—ñ –¥–∂–µ—Ä–µ–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ\n";
            statusMessage += "üîß –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ—Ç—å—Å—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑\n";
        }

        statusMessage += `\nüìù <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> SpaceWeatherLive –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ GFZ Potsdam —á–µ—Ä–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è API\n`;
        statusMessage += `üïê <b>–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ:</b> ${new Date().toLocaleTimeString(
            "uk-UA",
            {
                timeZone: "Europe/Kiev",
            }
        )}\n`;
        statusMessage += "üîÑ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∑–∞–ø–∏—Ç—ñ";

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–Ω–æ–≤—É", "api_status"),
                Markup.button.callback("üìä –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ", "update_current"),
            ],
            [
                Markup.button.callback("üîÆ –ü—Ä–æ–≥–Ω–æ–∑", "show_forecast"),
                Markup.button.callback("üåå –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞", "show_aurora"),
            ],
        ]);

        await ctx.reply(statusMessage, { ...keyboard, parse_mode: "HTML" });
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É API: ${error.message}`);
        await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É API");
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —á–∞—Å—É —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è
function getBestAuroraTime(latitude) {
    return (
        `üåô 22:00 - 02:00 –º—ñ—Å—Ü–µ–≤–æ–≥–æ —á–∞—Å—É\n` +
        `‚≠ê –ù–∞–π–∫—Ä–∞—â–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±–ª–∏–∑—å–∫–æ –æ–ø—ñ–≤–Ω–æ—á—ñ\n` +
        `üåÖ –£–Ω–∏–∫–∞–π—Ç–µ —Å–≤—ñ—Ç–∞–Ω–∫—É —Ç–∞ –∑–∞—Ö–æ–¥—É —Å–æ–Ω—Ü—è`
    );
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 9 –≥–æ–¥–∏–Ω –∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
function getLast9HoursData(parsedForecast) {
    if (!parsedForecast || !parsedForecast.days.length) {
        return [];
    }

    const now = new Date();
    const currentHour = now.getHours();
    const currentDay = now.getDate();

    let allHourlyData = [];

    // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –≥–æ–¥–∏–Ω–Ω—ñ –¥–∞–Ω—ñ –∑ —É—Å—ñ—Ö –¥–Ω—ñ–≤
    parsedForecast.days.forEach((day) => {
        if (day.hourlyData) {
            day.hourlyData.forEach((hourData) => {
                const [startTime] = hourData.timeRange.split("-");
                const hour = parseInt(startTime.split(":")[0]);

                allHourlyData.push({
                    ...hourData,
                    hour: hour,
                    day: day.originalDate.day,
                    dateStamp: day.dateStamp,
                });
            });
        }
    });

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –º–æ–º–µ–Ω—Ç –≤ –¥–∞–Ω–∏—Ö
    let currentIndex = -1;
    for (let i = 0; i < allHourlyData.length; i++) {
        const data = allHourlyData[i];
        if (data.day === currentDay && data.hour <= currentHour) {
            currentIndex = i;
        }
    }

    if (currentIndex === -1) {
        // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Ç–æ—á–Ω–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å, –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ
        currentIndex = allHourlyData.length - 1;
    }

    // –ë–µ—Ä–µ–º–æ 9 –≥–æ–¥–∏–Ω: 8 –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö + –ø–æ—Ç–æ—á–Ω–∞
    const startIndex = Math.max(0, currentIndex - 8);
    const last9Hours = allHourlyData.slice(startIndex, currentIndex + 1);

    log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${last9Hours.length} –≥–æ–¥–∏–Ω–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—É`);

    return last9Hours;
}

// –§—ñ–Ω–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏—Ä—ñ–≤–Ω—è–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏
function createKpChart(hourlyData) {
    if (!hourlyData || hourlyData.length === 0) {
        return "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É";
    }

    const maxKp = Math.max(...hourlyData.map((d) => parseFloat(d.kp)));
    const minKp = Math.min(...hourlyData.map((d) => parseFloat(d.kp)));
    const range = Math.max(maxKp - minKp, 1); // –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω 1

    let chart = "üìà <b>–ì—Ä–∞—Ñ—ñ–∫ Kp-—ñ–Ω–¥–µ–∫—Å—É (–æ—Å—Ç–∞–Ω–Ω—ñ 9 –≥–æ–¥–∏–Ω)</b>\n\n";

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π ASCII –≥—Ä–∞—Ñ—ñ–∫
    const chartHeight = 8;
    const chartLines = [];

    for (let row = chartHeight; row >= 0; row--) {
        let line = "";
        const value = minKp + (range * row) / chartHeight;

        // –ú–∞—Å—à—Ç–∞–± –∑–ª—ñ–≤–∞
        line += value.toFixed(1).padStart(4) + " ‚îÇ";

        // –¢–æ—á–∫–∏ –≥—Ä–∞—Ñ—ñ–∫—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        hourlyData.forEach((data, index) => {
            const kp = parseFloat(data.kp);
            const normalizedKp = ((kp - minKp) / range) * chartHeight;

            if (Math.abs(normalizedKp - row) < 0.5) {
                const status = FormatUtils.getKpStatus(kp);
                if (index === 0) {
                    line += " " + status.emoji; // –î–æ–¥–∞—î–º–æ –ø—Ä–æ–±—ñ–ª –ø–µ—Ä–µ–¥ –ø–µ—Ä—à–∏–º –µ–º–æ–¥–∂—ñ
                } else if (index >= 1 && index <= 3) {
                    line += " " + status.emoji; // –ü—Ä–æ–±—ñ–ª –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –µ–º–æ–¥–∂—ñ
                } else {
                    line += "  " + status.emoji; // –ü—Ä–æ–±—ñ–ª –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –µ–º–æ–¥–∂—ñ
                }
            } else {
                if (index === 0) {
                    line += "  "; // –î–≤–∞ –ø—Ä–æ–±—ñ–ª–∏ –¥–ª—è –ø–µ—Ä—à–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
                } else if (index >= 1 && index <= 3) {
                    line += "   "; // –î–≤–∞ –ø—Ä–æ–±—ñ–ª–∏ –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
                } else {
                    line += "  "; // –î–≤–∞ –ø—Ä–æ–±—ñ–ª–∏ –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
                }
            }
        });

        chartLines.push(line);
    }

    chart += "<code>";
    chartLines.forEach((line) => {
        chart += line + "\n";
    });

    // –î–æ–¥–∞—î–º–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É –≤—ñ—Å—å
    chart += "     ‚îî";
    hourlyData.forEach((data, index) => {
        if (index === 0) {
            chart += "‚îÄ‚îÄ";
        } else {
            chart += "‚îÄ‚îÄ‚îÄ‚îÄ"; // –¢—Ä–∏ —Ç–∏—Ä–µ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
        }
    });
    chart += "\n";

    // –ß–∞—Å–æ–≤—ñ –º—ñ—Ç–∫–∏ –∑—Å—É–Ω—É—Ç—ñ –≤–ª—ñ–≤–æ
    chart += "      "; // –ú–µ–Ω—à–µ –≤—ñ–¥—Å—Ç—É–ø—É –∑–ª—ñ–≤–∞
    hourlyData.forEach((data, index) => {
        const hour = data.timeRange.split("-")[0].split(":")[0];
        const formattedHour = parseInt(hour);

        if (index === 0) {
            chart += String(formattedHour);
        } else {
            chart += "  " + String(formattedHour); // –î–≤–∞ –ø—Ä–æ–±—ñ–ª–∏ –º—ñ–∂ —á–∏—Å–ª–∞–º–∏
        }
    });
    chart += "</code>\n\n";

    // –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é
    chart += "<b>üìä –î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ:</b>\n";
    hourlyData.forEach((data, index) => {
        const kp = parseFloat(data.kp);
        const status = FormatUtils.getKpStatus(kp);
        const isLast = index === hourlyData.length - 1;
        const marker = isLast ? "üëâ " : "   ";

        chart += `${marker}<code>${data.timeRange}</code>: ${data.kp} ${status.emoji} ${status.status}\n`;
    });

    return chart;
}

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì—Ä–∞—Ñ—ñ–∫ 9 –≥–æ–¥"
async function handleShow9HourChart(ctx, userLocations) {
    try {
        await ctx.answerCbQuery("üìà –°—Ç–≤–æ—Ä—é—é –≥—Ä–∞—Ñ—ñ–∫...");

        const loadingMessage = await ctx.reply(
            "üîÑ –ì–µ–Ω–µ—Ä—É—é –≥—Ä–∞—Ñ—ñ–∫ Kp-—ñ–Ω–¥–µ–∫—Å—É..."
        );

        // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑
        const textForecast = await EnhancedNOAAService.getNoaaData(
            "/text/3-day-geomag-forecast.txt"
        );

        if (!textForecast) {
            await ctx.deleteMessage(loadingMessage.message_id);
            await ctx.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—É");
            return;
        }

        const parsedForecast = parseNoaaTextForecast(textForecast);

        if (!parsedForecast) {
            await ctx.deleteMessage(loadingMessage.message_id);
            await ctx.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—É");
            return;
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 9 –≥–æ–¥–∏–Ω
        const last9HoursData = getLast9HoursData(parsedForecast);

        if (last9HoursData.length === 0) {
            await ctx.deleteMessage(loadingMessage.message_id);
            await ctx.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É");
            return;
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        const chartMessage = createKpChart(last9HoursData);

        // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–æ —Ç–∞ —á–∞—Å
        const updateTime = new Date().toLocaleString("uk-UA", {
            day: "2-digit",
            month: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
            timeZone: "Europe/Kiev",
        });

        const fullMessage =
            chartMessage +
            "\nüì° <b>–î–∂–µ—Ä–µ–ª–æ:</b> NOAA SWPC (—Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑)\n" +
            `üïê <b>–û–Ω–æ–≤–ª–µ–Ω–æ:</b> ${updateTime}\n` +
            "‚è∞ <b>–ß–∞—Å:</b> –∫–∏—ó–≤—Å—å–∫–∏–π\n\n" +
            "<i>–ì—Ä–∞—Ñ—ñ–∫ –ø–æ–∫–∞–∑—É—î —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—é –∑–º—ñ–Ω–∏ –≥–µ–æ–º–∞–≥–Ω—ñ—Ç–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</i>";

        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫", "update_chart"),
                Markup.button.callback("üìä –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ", "update_current"),
            ],
            [
                Markup.button.callback("üîÆ –ü—Ä–æ–≥–Ω–æ–∑", "show_forecast"),
                Markup.button.callback("üåå –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞", "show_aurora"),
            ],
        ]);

        await ctx.deleteMessage(loadingMessage.message_id);
        await ctx.reply(fullMessage, { ...keyboard, parse_mode: "HTML" });
    } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É: ${error.message}`);
        try {
            await ctx.deleteMessage(loadingMessage.message_id);
        } catch (deleteError) {}
        await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
}

module.exports = {
    getMainKeyboard,
    showCurrentConditions,
    handleForecast,
    handleAurora,
    handleAlerts,
    handleApiStatus,
    parseNoaaTextForecast,
    getCurrentKpFromTextForecast,
    getTodayFutureIntervalsFromTextForecast,
    handleShow9HourChart, // –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø
    getLast9HoursData, // –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø
    createKpChart, // –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø
    getBestAuroraTime,
    getRegionalAdvice,
    getSourceInfo,
};
