const {
    showMainSettings,
    showKpThresholdSettings,
    showAuroraSettings,
    showDailySettings,
    defaultSettings,
} = require("./settingsHandlers");
const { handleAurora } = require("./enhancedCommandHandlers");

// –õ–æ–≥—É–≤–∞–Ω–Ω—è
const log = (message) => {
    console.log(`[${new Date().toISOString()}] ${message}`);
};

// –û–±—Ä–æ–±–∫–∞ callback_query –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
async function handleSettingsCallback(
    ctx,
    action,
    userSettings,
    userLocations,
    geocodingApiKey
) {
    const userId = ctx.from.id;

    switch (action) {
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
        case "setup_notifications":
            await ctx.answerCbQuery();
            await showKpThresholdSettings(ctx, userSettings);
            break;

        case "setup_aurora":
            await ctx.answerCbQuery();
            await showAuroraSettings(ctx, userSettings);
            break;

        case "setup_daily":
            await ctx.answerCbQuery();
            await showDailySettings(ctx, userSettings);
            break;

        // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–≥—É Kp
        case action.match(/^set_kp_/)?.input:
            const threshold = parseFloat(action.replace("set_kp_", ""));
            const settings = userSettings.get(userId) || { ...defaultSettings };
            settings.kpThreshold = threshold;
            userSettings.set(userId, settings);

            await ctx.answerCbQuery(`‚úÖ –ü–æ—Ä—ñ–≥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: Kp = ${threshold}`);
            await showKpThresholdSettings(ctx, userSettings);
            break;

        // –ü–µ—Ä–µ–º–∏–∫–∞—á —Å–ø–æ–≤—ñ—â–µ–Ω—å
        case "toggle_notifications":
            const userSettings_toggle = userSettings.get(userId) || {
                ...defaultSettings,
            };
            userSettings_toggle.notifications =
                !userSettings_toggle.notifications;
            userSettings.set(userId, userSettings_toggle);

            await ctx.answerCbQuery(
                userSettings_toggle.notifications
                    ? "üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ!"
                    : "üîï –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ!"
            );
            await showKpThresholdSettings(ctx, userSettings);
            break;

        // –ü–µ—Ä–µ–º–∏–∫–∞—á—ñ –¥–ª—è Aurora
        case "enable_aurora":
            await ctx.answerCbQuery("üü¢ –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–æ!");
            const settings_aurora_on = userSettings.get(userId) || {
                ...defaultSettings,
            };
            settings_aurora_on.auroraNotifications = true;
            userSettings.set(userId, settings_aurora_on);
            await showAuroraSettings(ctx, userSettings);
            break;

        case "disable_aurora":
            await ctx.answerCbQuery("üî¥ –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞ –≤–∏–º–∫–Ω–µ–Ω–æ!");
            const settings_aurora_off = userSettings.get(userId) || {
                ...defaultSettings,
            };
            settings_aurora_off.auroraNotifications = false;
            userSettings.set(userId, settings_aurora_off);
            await showAuroraSettings(ctx, userSettings);
            break;

        // –ü–µ—Ä–µ–º–∏–∫–∞—á—ñ –¥–ª—è Daily
        case "enable_daily":
            await ctx.answerCbQuery("üü¢ –©–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —É–≤—ñ–º–∫–Ω–µ–Ω–æ!");
            const settings_daily_on = userSettings.get(userId) || {
                ...defaultSettings,
            };
            settings_daily_on.dailyForecast = true;
            userSettings.set(userId, settings_daily_on);
            await showDailySettings(ctx, userSettings);
            break;

        case "disable_daily":
            await ctx.answerCbQuery("üî¥ –©–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –≤–∏–º–∫–Ω–µ–Ω–æ!");
            const settings_daily_off = userSettings.get(userId) || {
                ...defaultSettings,
            };
            settings_daily_off.dailyForecast = false;
            userSettings.set(userId, settings_daily_off);
            await showDailySettings(ctx, userSettings);
            break;

        case "reset_settings":
            await ctx.answerCbQuery();
            userSettings.set(userId, { ...defaultSettings });

            const resetMessage =
                `üîß <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç—ñ</b>\n\n` +
                `–í—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º:\n` +
                `‚Ä¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: –≤–∏–º–∫–Ω–µ–Ω–æ\n` +
                `‚Ä¢ –ü–æ—Ä—ñ–≥ Kp: 5.0\n` +
                `‚Ä¢ –ü–æ–ª—è—Ä–Ω—ñ —Å—è–π–≤–∞: —É–≤—ñ–º–∫–Ω–µ–Ω–æ\n` +
                `‚Ä¢ –©–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑: –≤–∏–º–∫–Ω–µ–Ω–æ`;

            try {
                await ctx.editMessageText(resetMessage, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "‚Üê –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å",
                                    callback_data: "back_to_settings",
                                },
                            ],
                        ],
                    },
                    parse_mode: "HTML", // –î–û–î–ê–¢–ò
                });
            } catch (error) {
                if (!error.description?.includes("message is not modified")) {
                    log(
                        `–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è reset –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${error.message}`
                    );
                }
            }
            break;

        case "back_to_settings":
            await ctx.answerCbQuery();
            await showMainSettings(ctx, userSettings);
            break;

        default:
            return false; // –ù–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ
    }
    return true; // –û–±—Ä–æ–±–ª–µ–Ω–æ
}

module.exports = {
    handleSettingsCallback,
};
